/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IProblemFactory,
  IProblemFactoryInterface,
} from "../IProblemFactory";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "author",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "problem",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "checker",
        type: "address",
      },
    ],
    name: "CreateProblem",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "checker",
        type: "address",
      },
    ],
    name: "createProblem",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "problem",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IProblemFactory__factory {
  static readonly abi = _abi;
  static createInterface(): IProblemFactoryInterface {
    return new utils.Interface(_abi) as IProblemFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IProblemFactory {
    return new Contract(address, _abi, signerOrProvider) as IProblemFactory;
  }
}
