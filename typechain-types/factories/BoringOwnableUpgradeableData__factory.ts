/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BoringOwnableUpgradeableData,
  BoringOwnableUpgradeableDataInterface,
} from "../BoringOwnableUpgradeableData";

const _abi = [
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060d48061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80638da5cb5b146037578063e30c397814607f575b600080fd5b60005460569073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60015460569073ffffffffffffffffffffffffffffffffffffffff168156fea26469706673582212202f1bcb4e7d9ac851d0e9744c9bdc0de73440fd0b3e709df5ffd9b4cfdc3f77e364736f6c63430008110033";

type BoringOwnableUpgradeableDataConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BoringOwnableUpgradeableDataConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BoringOwnableUpgradeableData__factory extends ContractFactory {
  constructor(...args: BoringOwnableUpgradeableDataConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "BoringOwnableUpgradeableData";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BoringOwnableUpgradeableData> {
    return super.deploy(
      overrides || {}
    ) as Promise<BoringOwnableUpgradeableData>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BoringOwnableUpgradeableData {
    return super.attach(address) as BoringOwnableUpgradeableData;
  }
  connect(signer: Signer): BoringOwnableUpgradeableData__factory {
    return super.connect(signer) as BoringOwnableUpgradeableData__factory;
  }
  static readonly contractName: "BoringOwnableUpgradeableData";
  public readonly contractName: "BoringOwnableUpgradeableData";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BoringOwnableUpgradeableDataInterface {
    return new utils.Interface(_abi) as BoringOwnableUpgradeableDataInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BoringOwnableUpgradeableData {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BoringOwnableUpgradeableData;
  }
}
