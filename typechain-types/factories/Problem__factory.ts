/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Problem, ProblemInterface } from "../Problem";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "input",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "output",
            type: "bytes32",
          },
          {
            internalType: "uint224",
            name: "gasLimit",
            type: "uint224",
          },
        ],
        indexed: false,
        internalType: "struct TestCase[]",
        name: "tests",
        type: "tuple[]",
      },
    ],
    name: "NewTestVersion",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "contestant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "point",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "enum Verdict[]",
        name: "verdicts",
        type: "uint8[]",
      },
    ],
    name: "RunSolution",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "contestant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "solution",
        type: "address",
      },
    ],
    name: "UpdateSolution",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_OUTPUT_SIZE",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "solution",
        type: "address",
      },
    ],
    name: "_updateSolution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "input",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "output",
            type: "bytes32",
          },
          {
            internalType: "uint224",
            name: "gasLimit",
            type: "uint224",
          },
        ],
        internalType: "struct TestCase",
        name: "test",
        type: "tuple",
      },
    ],
    name: "addTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "author",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "checker",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "contestants",
    outputs: [
      {
        internalType: "address",
        name: "solution",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "point",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "version",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gateFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "solution",
        type: "address",
      },
    ],
    name: "gateUpdateAndRunSolution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contestant",
        type: "address",
      },
    ],
    name: "getContestantInfo",
    outputs: [
      {
        internalType: "address",
        name: "solution",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "point",
        type: "uint32",
      },
      {
        internalType: "bool",
        name: "isPointUpToDate",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_author",
        type: "address",
      },
      {
        internalType: "address",
        name: "_checker",
        type: "address",
      },
      {
        internalType: "address",
        name: "_gateFactory",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newChecker",
        type: "address",
      },
    ],
    name: "modifyChecker",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "input",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "output",
            type: "bytes32",
          },
          {
            internalType: "uint224",
            name: "gasLimit",
            type: "uint224",
          },
        ],
        internalType: "struct TestCase[]",
        name: "newTests",
        type: "tuple[]",
      },
    ],
    name: "replaceTests",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contestant",
        type: "address",
      },
    ],
    name: "runSolution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "testLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "testVersion",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tests",
    outputs: [
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "output",
        type: "bytes32",
      },
      {
        internalType: "uint224",
        name: "gasLimit",
        type: "uint224",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "solution",
        type: "address",
      },
    ],
    name: "updateAndRunSolution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "solution",
        type: "address",
      },
    ],
    name: "updateSolution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061201e806100206000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c806398f8062b116100cd578063af640d0f11610081578063cf5303cf11610066578063cf5303cf14610477578063d088ca3a14610497578063de22c8d4146104a057600080fd5b8063af640d0f14610452578063bf65eba81461045b57600080fd5b8063a169d122116100b2578063a169d1221461033d578063a6c3e6b914610415578063aba6fe461461043b57600080fd5b806398f8062b146103175780639e35122c1461032a57600080fd5b8063363cc95a116101245780636470a639116101095780636470a639146102435780636e4b8333146102f1578063754d1d541461030457600080fd5b8063363cc95a146101db57806356b64bd8146101ee57600080fd5b806307e491f514610156578063186280181461016b5780632f6c7ccc1461017e578063323fab3d146101c8575b600080fd5b6101696101643660046115f1565b6104c2565b005b610169610179366004611655565b6105dd565b60065461019e9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101696101d6366004611655565b6105f2565b6101696101e9366004611672565b610790565b6101696101fc366004611655565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6102b8610251366004611655565b60076020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff81169063ffffffff740100000000000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041683565b6040805173ffffffffffffffffffffffffffffffffffffffff909416845263ffffffff92831660208501529116908201526060016101bf565b6101696102ff3660046116ab565b610923565b610169610312366004611720565b610a58565b610169610325366004611655565b610c49565b610169610338366004611655565b6110fb565b6103dc61034b366004611655565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152600760209081526040918290208251606081018452905493841680825263ffffffff7401000000000000000000000000000000000000000086048116938301849052780100000000000000000000000000000000000000000000000090950490941692018290526002549293909290911490565b6040805173ffffffffffffffffffffffffffffffffffffffff909416845263ffffffff90921660208401521515908201526060016101bf565b60005461019e9062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b61044460015481565b6040519081526020016101bf565b61044460045481565b6104646105dc81565b60405161ffff90911681526020016101bf565b60055461019e9073ffffffffffffffffffffffffffffffffffffffff1681565b61044460025481565b6104b36104ae366004611773565b611105565b6040516101bf939291906117fa565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff16331461054e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d73672e73656e646572206e6f7420617574686f72000000000000000000000060448201526064015b60405180910390fd5b60026000815461055d90611870565b909155506001805482916003916000918261057783611870565b919050558152602001908152602001600020818161059591906119ad565b9050507fd47d89603b5f65c5893b4a688ddfc6f68a145f773ac60d9a23bc5d316f069fad6002546105c46111ce565b6040516105d2929190611bc9565b60405180910390a150565b6105e6816110fb565b6105ef33610c49565b50565b60003373ffffffffffffffffffffffffffffffffffffffff16634f8632ba6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106639190611c51565b6006546040517f56ac0cc200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80841660048301529293503392909116906356ac0cc290602401602060405180830381865afa1580156106d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fc9190611c51565b73ffffffffffffffffffffffffffffffffffffffff1614610779576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f696e76616c6964206761746520262075736572000000000000000000000000006044820152606401610545565b6107838183610790565b61078c81610c49565b5050565b6006546040517f0ef3a37800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152838116602483015290911690630ef3a37890604401602060405180830381865afa158015610808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082c9190611c6e565b610892576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f696e76616c696420736f6c7574696f6e000000000000000000000000000000006044820152606401610545565b73ffffffffffffffffffffffffffffffffffffffff82811660008181526007602090815260409182902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016948616948517905581519283528201929092527f8d26994047325d86771f1db98015f3be8a8aeb8b0484fca863ec6ff4c639c61091015b60405180910390a15050565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff1633146109aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d73672e73656e646572206e6f7420617574686f7200000000000000000000006044820152606401610545565b6002600081546109b990611870565b9091555060005b81811015610a17578282828181106109da576109da611c90565b90506020028101906109ec9190611cbf565b6000828152600360205260409020610a0482826119ad565b50610a10905081611870565b90506109c0565b5060018190556002547fd47d89603b5f65c5893b4a688ddfc6f68a145f773ac60d9a23bc5d316f069fad90610a4a6111ce565b604051610917929190611bc9565b600054610100900460ff1615808015610a785750600054600160ff909116105b80610a925750303b158015610a92575060005460ff166001145b610b1e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610545565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610b7c57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b60048590556005805473ffffffffffffffffffffffffffffffffffffffff8086167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556006805492851692909116919091179055610bdf84611374565b8015610c4257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b73ffffffffffffffffffffffffffffffffffffffff8082166000908152600760205260409020541680610cd8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f736f6c7574696f6e206e6f74207375626d6974746564000000000000000000006044820152606401610545565b600154600090818167ffffffffffffffff811115610cf857610cf86118a8565b604051908082528060200260200182016040528015610d21578160200160208202803683370190505b50905060005b82811015610f9957600081815260036020526040808220815160608101909252805482908290610d56906118d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610d82906118d7565b8015610dcf5780601f10610da457610100808354040283529160200191610dcf565b820191906000526020600020905b815481529060010190602001808311610db257829003601f168201915b5050509183525050600182015460208201526002909101547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166040909101529050600080610e1a8884611458565b915091508115610f03576005546040517ffabc0e7c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063fabc0e7c90610e7c9086908590600401611cfd565b602060405180830381865afa158015610e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebd9190611d2b565b858581518110610ecf57610ecf611c90565b60200260200101906002811115610ee857610ee8611d4c565b90816002811115610efb57610efb611d4c565b905250610f47565b6002858581518110610f1757610f17611c90565b60200260200101906002811115610f3057610f30611d4c565b90816002811115610f4357610f43611d4c565b9052505b6000858581518110610f5b57610f5b611c90565b60200260200101516002811115610f7457610f74611d4c565b03610f8557610f8287611870565b96505b50505080610f9290611870565b9050610d27565b50600060405180606001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018486612710610fd29190611d7b565b610fdc9190611dc1565b63ffffffff9081168252600254811660209283015273ffffffffffffffffffffffffffffffffffffffff898116600090815260078452604090819020855181549587015187840151919094167fffffffffffffffff000000000000000000000000000000000000000000000000909616959095177401000000000000000000000000000000000000000084861602177fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff167801000000000000000000000000000000000000000000000000948616949094029390931790925590519293507fbfdb0988ea5adc6cf3c05a9bd3bce7c93cd42aebe39c5127f354909ae413178e926110eb928a9290918790611dd5565b60405180910390a1505050505050565b6105ef3382610790565b600360205260009081526040902080548190611120906118d7565b80601f016020809104026020016040519081016040528092919081815260200182805461114c906118d7565b80156111995780601f1061116e57610100808354040283529160200191611199565b820191906000526020600020905b81548152906001019060200180831161117c57829003601f168201915b5050505060018301546002909301549192917bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16905083565b606060015467ffffffffffffffff8111156111eb576111eb6118a8565b60405190808252806020026020018201604052801561125457816020015b60408051606080820183528152600060208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816112095790505b50905060005b8151811015611370576000818152600360205260409081902081516060810190925280548290829061128b906118d7565b80601f01602080910402602001604051908101604052809291908181526020018280546112b7906118d7565b80156113045780601f106112d957610100808354040283529160200191611304565b820191906000526020600020905b8154815290600101906020018083116112e757829003601f168201915b5050509183525050600182015460208201526002909101547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16604090910152825183908390811061135457611354611c90565b60200260200101819052508061136990611870565b905061125a565b5090565b600054610100900460ff1661140b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610545565b6000805473ffffffffffffffffffffffffffffffffffffffff90921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b6000606061153d846064856040015160656114739190611e88565b61147d9190611ecf565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166105dc6309c5eabe60e01b87600001516040516024016114bb9190611f0a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611566565b9092509050811561155f578080602001905181019061155c9190611f1d565b90505b9250929050565b6000606060008060008661ffff1667ffffffffffffffff81111561158c5761158c6118a8565b6040519080825280601f01601f1916602001820160405280156115b6576020820181803683370190505b50905060008087516020890160008d8df191503d9250868311156115d8578692505b828152826000602083013e909890975095505050505050565b60006020828403121561160357600080fd5b813567ffffffffffffffff81111561161a57600080fd5b82016060818503121561162c57600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff811681146105ef57600080fd5b60006020828403121561166757600080fd5b813561162c81611633565b6000806040838503121561168557600080fd5b823561169081611633565b915060208301356116a081611633565b809150509250929050565b600080602083850312156116be57600080fd5b823567ffffffffffffffff808211156116d657600080fd5b818501915085601f8301126116ea57600080fd5b8135818111156116f957600080fd5b8660208260051b850101111561170e57600080fd5b60209290920196919550909350505050565b6000806000806080858703121561173657600080fd5b84359350602085013561174881611633565b9250604085013561175881611633565b9150606085013561176881611633565b939692955090935050565b60006020828403121561178557600080fd5b5035919050565b60005b838110156117a757818101518382015260200161178f565b50506000910152565b600081518084526117c881602086016020860161178c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60608152600061180d60608301866117b0565b90508360208301527bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036118a1576118a1611841565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600181811c908216806118eb57607f821691505b602082108103611924577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561197457600081815260208120601f850160051c810160208610156119515750805b601f850160051c820191505b818110156119705782815560010161195d565b5050505b505050565b600081357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811681146119a757600080fd5b92915050565b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18336030181126119df57600080fd5b8201803567ffffffffffffffff8111156119f857600080fd5b60208136038184011315611a0b57600080fd5b611a1f82611a1986546118d7565b8661192a565b6000601f831160018114611a735760008415611a3d57508482018301355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178655611b0c565b6000868152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0851690835b82811015611ac3578785018601358255938501936001909101908501611aa2565b5085821015611b00577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88760031b161c198585890101351681555b505060018460011b0186555b505084013560018401555061078c9050611b2860408401611979565b600283017bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82167fffffffff000000000000000000000000000000000000000000000000000000008254161781555050565b6000815160608452611b8b60608501826117b0565b9050602083015160208501527bffffffffffffffffffffffffffffffffffffffffffffffffffffffff60408401511660408501528091505092915050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015611c43577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018452611c31868351611b76565b95509284019290840190600101611bf7565b509398975050505050505050565b600060208284031215611c6357600080fd5b815161162c81611633565b600060208284031215611c8057600080fd5b8151801515811461162c57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1833603018112611cf357600080fd5b9190910192915050565b604081526000611d106040830185611b76565b8281036020840152611d2281856117b0565b95945050505050565b600060208284031215611d3d57600080fd5b81516003811061162c57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b80820281158282048414176119a7576119a7611841565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611dd057611dd0611d92565b500490565b60006080820173ffffffffffffffffffffffffffffffffffffffff87168352602063ffffffff808816828601528087166040860152506080606085015281855180845260a08601915082870193506000805b82811015611e7857855160038110611e66577f4e487b710000000000000000000000000000000000000000000000000000000083526021600452602483fd5b84529484019492840192600101611e27565b50919a9950505050505050505050565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff828116828216818102831692918115828504821417611ec657611ec6611841565b50505092915050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff80841680611efe57611efe611d92565b92169190910492915050565b60208152600061162c60208301846117b0565b600060208284031215611f2f57600080fd5b815167ffffffffffffffff80821115611f4757600080fd5b818401915084601f830112611f5b57600080fd5b815181811115611f6d57611f6d6118a8565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715611fb357611fb36118a8565b81604052828152876020848701011115611fcc57600080fd5b611fdd83602083016020880161178c565b97965050505050505056fea2646970667358221220bec7ff0e8ca84a474ff2253545153c6f22e39d7b1880fec5aaed9a526ae4befe64736f6c63430008110033";

type ProblemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProblemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Problem__factory extends ContractFactory {
  constructor(...args: ProblemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Problem";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Problem> {
    return super.deploy(overrides || {}) as Promise<Problem>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Problem {
    return super.attach(address) as Problem;
  }
  connect(signer: Signer): Problem__factory {
    return super.connect(signer) as Problem__factory;
  }
  static readonly contractName: "Problem";
  public readonly contractName: "Problem";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProblemInterface {
    return new utils.Interface(_abi) as ProblemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Problem {
    return new Contract(address, _abi, signerOrProvider) as Problem;
  }
}
