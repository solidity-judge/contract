/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Problem, ProblemInterface } from "../Problem";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "contestant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "solutionHash",
        type: "bytes32",
      },
    ],
    name: "DeclareSolutionHash",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "input",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "output",
            type: "bytes32",
          },
          {
            internalType: "uint224",
            name: "gasLimit",
            type: "uint224",
          },
        ],
        indexed: false,
        internalType: "struct TestCase[]",
        name: "tests",
        type: "tuple[]",
      },
    ],
    name: "NewTestVersion",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "contestant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "point",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isPreDeadlineSolution",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "enum Verdict[]",
        name: "verdicts",
        type: "uint8[]",
      },
    ],
    name: "RunSolution",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "contestant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isPreDeadlineSolution",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "address",
        name: "solution",
        type: "address",
      },
    ],
    name: "UpdateSolution",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_OUTPUT_SIZE",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "input",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "output",
            type: "bytes32",
          },
          {
            internalType: "uint224",
            name: "gasLimit",
            type: "uint224",
          },
        ],
        internalType: "struct TestCase",
        name: "test",
        type: "tuple",
      },
    ],
    name: "addTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "author",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "checker",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "contestants",
    outputs: [
      {
        internalType: "bytes32",
        name: "solutionHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "solutionPreDeadline",
        type: "address",
      },
      {
        internalType: "address",
        name: "solutionPosDeadline",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "pointPreDeadline",
        type: "uint24",
      },
      {
        internalType: "uint24",
        name: "pointPosDeadline",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deadline",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "solutionHash",
        type: "bytes32",
      },
    ],
    name: "declareSolutionHash",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gateFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contestant",
        type: "address",
      },
    ],
    name: "getContestantInfo",
    outputs: [
      {
        internalType: "bytes32",
        name: "solutionHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "solutionPreDeadline",
        type: "address",
      },
      {
        internalType: "address",
        name: "solutionPosDeadline",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "pointPreDeadline",
        type: "uint24",
      },
      {
        internalType: "uint24",
        name: "pointPosDeadline",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_author",
        type: "address",
      },
      {
        internalType: "address",
        name: "_checker",
        type: "address",
      },
      {
        internalType: "address",
        name: "_gateFactory",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "input",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "output",
            type: "bytes32",
          },
          {
            internalType: "uint224",
            name: "gasLimit",
            type: "uint224",
          },
        ],
        internalType: "struct TestCase[]",
        name: "newTests",
        type: "tuple[]",
      },
    ],
    name: "replaceTests",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contestant",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isBeforeDeadline",
        type: "bool",
      },
    ],
    name: "runPreDeadlineSolution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isPreDeadlineSolution",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "solutionBytecode",
        type: "bytes",
      },
    ],
    name: "submit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "testLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "testVersion",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tests",
    outputs: [
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "output",
        type: "bytes32",
      },
      {
        internalType: "uint224",
        name: "gasLimit",
        type: "uint224",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061206e806100206000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c8063a169d122116100b2578063af640d0f11610081578063cf5303cf11610066578063cf5303cf146103ca578063d088ca3a146103ea578063de22c8d4146103f357600080fd5b8063af640d0f146103a5578063bf65eba8146103ae57600080fd5b8063a169d122146102b1578063a2d06af814610363578063a6c3e6b914610376578063aba6fe461461039c57600080fd5b80636470a639116100ee5780636470a639146101a95780636e4b833314610278578063754d1d541461028b578063845170ec1461029e57600080fd5b806307e491f51461012057806329dcb0cf146101355780632f6c7ccc14610151578063334f0f5914610196575b600080fd5b61013361012e3660046115aa565b610415565b005b61013e60075481565b6040519081526020015b60405180910390f35b6006546101719073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610148565b6101336101a43660046116e9565b610530565b61022f6101b736600461178a565b600860205260009081526040902080546001820154600290920154909173ffffffffffffffffffffffffffffffffffffffff908116919081169062ffffff7401000000000000000000000000000000000000000082048116917701000000000000000000000000000000000000000000000090041685565b6040805195865273ffffffffffffffffffffffffffffffffffffffff9485166020870152939092169284019290925262ffffff918216606084015216608082015260a001610148565b6101336102863660046117a5565b610704565b61013361029936600461181a565b610845565b6101336102ac366004611867565b610a36565b61022f6102bf36600461178a565b73ffffffffffffffffffffffffffffffffffffffff908116600090815260086020908152604091829020825160a08101845281548082526001830154861693820184905260029092015494851693810184905262ffffff740100000000000000000000000000000000000000008604811660608301819052770100000000000000000000000000000000000000000000009096041660809091018190529094919391565b610133610371366004611880565b610af5565b6000546101719062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b61013e60015481565b61013e60045481565b6103b76105dc81565b60405161ffff9091168152602001610148565b6005546101719073ffffffffffffffffffffffffffffffffffffffff1681565b61013e60025481565b610406610401366004611867565b610b6f565b60405161014893929190611918565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff1633146104a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d73672e73656e646572206e6f7420617574686f72000000000000000000000060448201526064015b60405180910390fd5b6002600081546104b09061198e565b90915550600180548291600391600091826104ca8361198e565b91905055815260200190815260200160002081816104e89190611a9c565b9050507fd47d89603b5f65c5893b4a688ddfc6f68a145f773ac60d9a23bc5d316f069fad600254610517610c38565b604051610525929190611cb8565b60405180910390a150565b6040805173ffffffffffffffffffffffffffffffffffffffff85166020820152600091610576918391016040516020818303038152906040528051906020012084610dde565b9050821561064f5773ffffffffffffffffffffffffffffffffffffffff84811660009081526008602090815260409091206001810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169385169390931790925583519084012090548114610649576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e76616c696420736f6c7574696f6e206861736800000000000000000000006044820152606401610498565b506106a6565b73ffffffffffffffffffffffffffffffffffffffff848116600090815260086020526040902060020180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169183169190911790555b6040805173ffffffffffffffffffffffffffffffffffffffff8681168252851515602083015283168183015290517fc7db9c128a69cb8d6973c2af190a7c471a2f3004971dafc7643d4beab74461c59181900360600190a150505050565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff16331461078b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d73672e73656e646572206e6f7420617574686f7200000000000000000000006044820152606401610498565b60026000815461079a9061198e565b9091555060005b818110156107f8578282828181106107bb576107bb611d40565b90506020028101906107cd9190611d6f565b60008281526003602052604090206107e58282611a9c565b506107f190508161198e565b90506107a1565b5060018190556002547fd47d89603b5f65c5893b4a688ddfc6f68a145f773ac60d9a23bc5d316f069fad9061082b610c38565b604051610839929190611cb8565b60405180910390a15050565b600054610100900460ff16158080156108655750600054600160ff909116105b8061087f5750303b15801561087f575060005460ff166001145b61090b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610498565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561096957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b60048590556005805473ffffffffffffffffffffffffffffffffffffffff8086167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560068054928516929091169190911790556109cc84610f46565b8015610a2f57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6001600754421115610aa4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6f6e6c79206265666f726520646561646c696e650000000000000000000000006044820152606401610498565b3360008181526008602090815260409182902085905581518381529081018590527f3f7e81f1c8e479a52b2ec36c9a3df4d700ade5e5540b8303ebedfdd9aceeedc2910160405180910390a1505050565b8015610b385773ffffffffffffffffffffffffffffffffffffffff8083166000908152600860205260409020600190810154610b34928592911661102a565b5050565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260086020526040812060020154610b34928592911661102a565b600360205260009081526040902080548190610b8a906119c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb6906119c6565b8015610c035780601f10610bd857610100808354040283529160200191610c03565b820191906000526020600020905b815481529060010190602001808311610be657829003601f168201915b5050505060018301546002909301549192917bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16905083565b606060015467ffffffffffffffff811115610c5557610c55611625565b604051908082528060200260200182016040528015610cbe57816020015b60408051606080820183528152600060208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610c735790505b50905060005b8151811015610dda5760008181526003602052604090819020815160608101909252805482908290610cf5906119c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610d21906119c6565b8015610d6e5780601f10610d4357610100808354040283529160200191610d6e565b820191906000526020600020905b815481529060010190602001808311610d5157829003601f168201915b5050509183525050600182015460208201526002909101547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166040909101528251839083908110610dbe57610dbe611d40565b602002602001018190525080610dd39061198e565b9050610cc4565b5090565b60008084471015610e4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e63650000006044820152606401610498565b8251600003610eb6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152606401610498565b8383516020850187f5905073ffffffffffffffffffffffffffffffffffffffff8116610f3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152606401610498565b949350505050565b600054610100900460ff16610fdd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610498565b6000805473ffffffffffffffffffffffffffffffffffffffff90921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b600154600090818167ffffffffffffffff81111561104a5761104a611625565b604051908082528060200260200182016040528015611073578160200160208202803683370190505b50905060005b828110156112eb576000818152600360205260408082208151606081019092528054829082906110a8906119c6565b80601f01602080910402602001604051908101604052809291908181526020018280546110d4906119c6565b80156111215780601f106110f657610100808354040283529160200191611121565b820191906000526020600020905b81548152906001019060200180831161110457829003601f168201915b5050509183525050600182015460208201526002909101547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16604090910152905060008061116c8884611411565b915091508115611255576005546040517ffabc0e7c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063fabc0e7c906111ce9086908590600401611dad565b602060405180830381865afa1580156111eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120f9190611ddb565b85858151811061122157611221611d40565b6020026020010190600281111561123a5761123a611dfc565b9081600281111561124d5761124d611dfc565b905250611299565b600285858151811061126957611269611d40565b6020026020010190600281111561128257611282611dfc565b9081600281111561129557611295611dfc565b9052505b60008585815181106112ad576112ad611d40565b602002602001015160028111156112c6576112c6611dfc565b036112d7576112d48761198e565b96505b505050806112e49061198e565b9050611079565b5073ffffffffffffffffffffffffffffffffffffffff86166000908152600860205260408120908361131f86612710611e2b565b6113299190611e71565b9050861561137e576002820180547fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000062ffffff8416021790556113ca565b6002820180547fffffffffffff000000ffffffffffffffffffffffffffffffffffffffffffffff167701000000000000000000000000000000000000000000000062ffffff8416021790555b7f513cda15eb3e6a8b83c0c5a3f01aa7e254cf058c407754a4f5bb210bc77803ee888289866040516113ff9493929190611e85565b60405180910390a15050505050505050565b600060606114f68460648560400151606561142c9190611f35565b6114369190611f7c565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166105dc6309c5eabe60e01b87600001516040516024016114749190611fb7565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261151f565b9092509050811561151857808060200190518101906115159190611fca565b90505b9250929050565b6000606060008060008661ffff1667ffffffffffffffff81111561154557611545611625565b6040519080825280601f01601f19166020018201604052801561156f576020820181803683370190505b50905060008087516020890160008d8df191503d925086831115611591578692505b828152826000602083013e909890975095505050505050565b6000602082840312156115bc57600080fd5b813567ffffffffffffffff8111156115d357600080fd5b8201606081850312156115e557600080fd5b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461161057600080fd5b919050565b8035801515811461161057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561169b5761169b611625565b604052919050565b600067ffffffffffffffff8211156116bd576116bd611625565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6000806000606084860312156116fe57600080fd5b611707846115ec565b925061171560208501611615565b9150604084013567ffffffffffffffff81111561173157600080fd5b8401601f8101861361174257600080fd5b8035611755611750826116a3565b611654565b81815287602083850101111561176a57600080fd5b816020840160208301376000602083830101528093505050509250925092565b60006020828403121561179c57600080fd5b6115e5826115ec565b600080602083850312156117b857600080fd5b823567ffffffffffffffff808211156117d057600080fd5b818501915085601f8301126117e457600080fd5b8135818111156117f357600080fd5b8660208260051b850101111561180857600080fd5b60209290920196919550909350505050565b6000806000806080858703121561183057600080fd5b84359350611840602086016115ec565b925061184e604086016115ec565b915061185c606086016115ec565b905092959194509250565b60006020828403121561187957600080fd5b5035919050565b6000806040838503121561189357600080fd5b61189c836115ec565b915061151560208401611615565b60005b838110156118c55781810151838201526020016118ad565b50506000910152565b600081518084526118e68160208601602086016118aa565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60608152600061192b60608301866118ce565b90508360208301527bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036119bf576119bf61195f565b5060010190565b600181811c908216806119da57607f821691505b602082108103611a13577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f821115611a6357600081815260208120601f850160051c81016020861015611a405750805b601f850160051c820191505b81811015611a5f57828155600101611a4c565b5050505b505050565b600081357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff81168114611a9657600080fd5b92915050565b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1833603018112611ace57600080fd5b8201803567ffffffffffffffff811115611ae757600080fd5b60208136038184011315611afa57600080fd5b611b0e82611b0886546119c6565b86611a19565b6000601f831160018114611b625760008415611b2c57508482018301355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178655611bfb565b6000868152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0851690835b82811015611bb2578785018601358255938501936001909101908501611b91565b5085821015611bef577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88760031b161c198585890101351681555b505060018460011b0186555b5050840135600184015550610b349050611c1760408401611a68565b600283017bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82167fffffffff000000000000000000000000000000000000000000000000000000008254161781555050565b6000815160608452611c7a60608501826118ce565b9050602083015160208501527bffffffffffffffffffffffffffffffffffffffffffffffffffffffff60408401511660408501528091505092915050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015611d32577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018452611d20868351611c65565b95509284019290840190600101611ce6565b509398975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1833603018112611da357600080fd5b9190910192915050565b604081526000611dc06040830185611c65565b8281036020840152611dd281856118ce565b95945050505050565b600060208284031215611ded57600080fd5b8151600381106115e557600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8082028115828204841417611a9657611a9661195f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611e8057611e80611e42565b500490565b60006080820173ffffffffffffffffffffffffffffffffffffffff87168352602062ffffff87168185015285151560408501526080606085015281855180845260a08601915082870193506000805b82811015611f2557855160038110611f13577f4e487b710000000000000000000000000000000000000000000000000000000083526021600452602483fd5b84529484019492840192600101611ed4565b50919a9950505050505050505050565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff828116828216818102831692918115828504821417611f7357611f7361195f565b50505092915050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff80841680611fab57611fab611e42565b92169190910492915050565b6020815260006115e560208301846118ce565b600060208284031215611fdc57600080fd5b815167ffffffffffffffff811115611ff357600080fd5b8201601f8101841361200457600080fd5b8051612012611750826116a3565b81815285602083850101111561202757600080fd5b611dd28260208301602086016118aa56fea264697066735822122034f3a837e190b8f1125039d11b4dc1564c6d9ab0778432a74886c4814409ecf464736f6c63430008110033";

type ProblemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProblemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Problem__factory extends ContractFactory {
  constructor(...args: ProblemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Problem";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Problem> {
    return super.deploy(overrides || {}) as Promise<Problem>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Problem {
    return super.attach(address) as Problem;
  }
  connect(signer: Signer): Problem__factory {
    return super.connect(signer) as Problem__factory;
  }
  static readonly contractName: "Problem";
  public readonly contractName: "Problem";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProblemInterface {
    return new utils.Interface(_abi) as ProblemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Problem {
    return new Contract(address, _abi, signerOrProvider) as Problem;
  }
}
