/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Problem, ProblemInterface } from "../Problem";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "input",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "output",
            type: "bytes32",
          },
          {
            internalType: "uint224",
            name: "gasLimit",
            type: "uint224",
          },
        ],
        indexed: false,
        internalType: "struct TestCase[]",
        name: "tests",
        type: "tuple[]",
      },
    ],
    name: "NewTestVersion",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "contestant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "point",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "enum Verdict[]",
        name: "verdicts",
        type: "uint8[]",
      },
    ],
    name: "RunSolution",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "contestant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "solution",
        type: "address",
      },
    ],
    name: "UpdateSolution",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_OUTPUT_SIZE",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "input",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "output",
            type: "bytes32",
          },
          {
            internalType: "uint224",
            name: "gasLimit",
            type: "uint224",
          },
        ],
        internalType: "struct TestCase",
        name: "test",
        type: "tuple",
      },
    ],
    name: "addTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "author",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "checker",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "contestants",
    outputs: [
      {
        internalType: "address",
        name: "solution",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "point",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "version",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gateFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contestant",
        type: "address",
      },
    ],
    name: "getContestantInfo",
    outputs: [
      {
        internalType: "address",
        name: "solution",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "point",
        type: "uint32",
      },
      {
        internalType: "bool",
        name: "isPointUpToDate",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_author",
        type: "address",
      },
      {
        internalType: "address",
        name: "_checker",
        type: "address",
      },
      {
        internalType: "address",
        name: "_gateFactory",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newChecker",
        type: "address",
      },
    ],
    name: "modifyChecker",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "input",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "output",
            type: "bytes32",
          },
          {
            internalType: "uint224",
            name: "gasLimit",
            type: "uint224",
          },
        ],
        internalType: "struct TestCase[]",
        name: "newTests",
        type: "tuple[]",
      },
    ],
    name: "replaceTests",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contestant",
        type: "address",
      },
    ],
    name: "runSolution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "testLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "testVersion",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tests",
    outputs: [
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "output",
        type: "bytes32",
      },
      {
        internalType: "uint224",
        name: "gasLimit",
        type: "uint224",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "solution",
        type: "address",
      },
    ],
    name: "updateAndRunSolution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "solution",
        type: "address",
      },
    ],
    name: "updateSolution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611dc5806100206000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c80639e35122c116100b2578063af640d0f11610081578063cf5303cf11610066578063cf5303cf1461041b578063d088ca3a1461043b578063de22c8d41461044457600080fd5b8063af640d0f146103f6578063bf65eba8146103ff57600080fd5b80639e35122c146102ce578063a169d122146102e1578063a6c3e6b9146103b9578063aba6fe46146103df57600080fd5b80636470a639116100ee5780636470a639146101e75780636e4b833314610295578063754d1d54146102a857806398f8062b146102bb57600080fd5b806307e491f51461012057806318628018146101355780632f6c7ccc1461014857806356b64bd814610192575b600080fd5b61013361012e3660046113eb565b610466565b005b610133610143366004611456565b610581565b6006546101689073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101336101a0366004611456565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61025c6101f5366004611456565b60076020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff81169063ffffffff740100000000000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041683565b6040805173ffffffffffffffffffffffffffffffffffffffff909416845263ffffffff9283166020850152911690820152606001610189565b6101336102a3366004611471565b610596565b6101336102b63660046114e6565b6106d7565b6101336102c9366004611456565b6108c8565b6101336102dc366004611456565b610d7a565b6103806102ef366004611456565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152600760209081526040918290208251606081018452905493841680825263ffffffff7401000000000000000000000000000000000000000086048116938301849052780100000000000000000000000000000000000000000000000090950490941692018290526002549293909290911490565b6040805173ffffffffffffffffffffffffffffffffffffffff909416845263ffffffff9092166020840152151590820152606001610189565b6000546101689062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b6103e860015481565b604051908152602001610189565b6103e860045481565b6104086105dc81565b60405161ffff9091168152602001610189565b6005546101689073ffffffffffffffffffffffffffffffffffffffff1681565b6103e860025481565b610457610452366004611533565b610eff565b604051610189939291906115ba565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff1633146104f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d73672e73656e646572206e6f7420617574686f72000000000000000000000060448201526064015b60405180910390fd5b60026000815461050190611630565b909155506001805482916003916000918261051b83611630565b9190505581526020019081526020016000208181610539919061176d565b9050507fd47d89603b5f65c5893b4a688ddfc6f68a145f773ac60d9a23bc5d316f069fad600254610568610fc8565b60405161057692919061198d565b60405180910390a150565b61058a81610d7a565b610593336108c8565b50565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff16331461061d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d73672e73656e646572206e6f7420617574686f72000000000000000000000060448201526064016104e9565b60026000815461062c90611630565b9091555060005b8181101561068a5782828281811061064d5761064d611a15565b905060200281019061065f9190611a44565b6000828152600360205260409020610677828261176d565b50610683905081611630565b9050610633565b5060018190556002547fd47d89603b5f65c5893b4a688ddfc6f68a145f773ac60d9a23bc5d316f069fad906106bd610fc8565b6040516106cb92919061198d565b60405180910390a15050565b600054610100900460ff16158080156106f75750600054600160ff909116105b806107115750303b158015610711575060005460ff166001145b61079d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104e9565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156107fb57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b60048590556005805473ffffffffffffffffffffffffffffffffffffffff8086167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600680549285169290911691909117905561085e8461116e565b80156108c157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b73ffffffffffffffffffffffffffffffffffffffff8082166000908152600760205260409020541680610957576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f736f6c7574696f6e206e6f74207375626d69747465640000000000000000000060448201526064016104e9565b600154600090818167ffffffffffffffff81111561097757610977611668565b6040519080825280602002602001820160405280156109a0578160200160208202803683370190505b50905060005b82811015610c18576000818152600360205260408082208151606081019092528054829082906109d590611697565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0190611697565b8015610a4e5780601f10610a2357610100808354040283529160200191610a4e565b820191906000526020600020905b815481529060010190602001808311610a3157829003601f168201915b5050509183525050600182015460208201526002909101547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166040909101529050600080610a998884611252565b915091508115610b82576005546040517ffabc0e7c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063fabc0e7c90610afb9086908590600401611a82565b602060405180830381865afa158015610b18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3c9190611ab0565b858581518110610b4e57610b4e611a15565b60200260200101906002811115610b6757610b67611ad1565b90816002811115610b7a57610b7a611ad1565b905250610bc6565b6002858581518110610b9657610b96611a15565b60200260200101906002811115610baf57610baf611ad1565b90816002811115610bc257610bc2611ad1565b9052505b6000858581518110610bda57610bda611a15565b60200260200101516002811115610bf357610bf3611ad1565b03610c0457610c0187611630565b96505b50505080610c1190611630565b90506109a6565b50600060405180606001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018486612710610c519190611b00565b610c5b9190611b46565b63ffffffff9081168252600254811660209283015273ffffffffffffffffffffffffffffffffffffffff898116600090815260078452604090819020855181549587015187840151919094167fffffffffffffffff000000000000000000000000000000000000000000000000909616959095177401000000000000000000000000000000000000000084861602177fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff167801000000000000000000000000000000000000000000000000948616949094029390931790925590519293507fbfdb0988ea5adc6cf3c05a9bd3bce7c93cd42aebe39c5127f354909ae413178e92610d6a928a9290918790611b5a565b60405180910390a1505050505050565b6006546040517f0ef3a37800000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015290911690630ef3a37890604401602060405180830381865afa158015610df0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e149190611c0d565b610e7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f696e76616c696420736f6c7574696f6e0000000000000000000000000000000060448201526064016104e9565b3360008181526007602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86169081179091558251938452908301527f8d26994047325d86771f1db98015f3be8a8aeb8b0484fca863ec6ff4c639c6109101610576565b600360205260009081526040902080548190610f1a90611697565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4690611697565b8015610f935780601f10610f6857610100808354040283529160200191610f93565b820191906000526020600020905b815481529060010190602001808311610f7657829003601f168201915b5050505060018301546002909301549192917bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16905083565b606060015467ffffffffffffffff811115610fe557610fe5611668565b60405190808252806020026020018201604052801561104e57816020015b60408051606080820183528152600060208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816110035790505b50905060005b815181101561116a576000818152600360205260409081902081516060810190925280548290829061108590611697565b80601f01602080910402602001604051908101604052809291908181526020018280546110b190611697565b80156110fe5780601f106110d3576101008083540402835291602001916110fe565b820191906000526020600020905b8154815290600101906020018083116110e157829003601f168201915b5050509183525050600182015460208201526002909101547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16604090910152825183908390811061114e5761114e611a15565b60200260200101819052508061116390611630565b9050611054565b5090565b600054610100900460ff16611205576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016104e9565b6000805473ffffffffffffffffffffffffffffffffffffffff90921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b600060606113378460648560400151606561126d9190611c2f565b6112779190611c76565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166105dc6309c5eabe60e01b87600001516040516024016112b59190611cb1565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611360565b9092509050811561135957808060200190518101906113569190611cc4565b90505b9250929050565b6000606060008060008661ffff1667ffffffffffffffff81111561138657611386611668565b6040519080825280601f01601f1916602001820160405280156113b0576020820181803683370190505b50905060008087516020890160008d8df191503d9250868311156113d2578692505b828152826000602083013e909890975095505050505050565b6000602082840312156113fd57600080fd5b813567ffffffffffffffff81111561141457600080fd5b82016060818503121561142657600080fd5b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461145157600080fd5b919050565b60006020828403121561146857600080fd5b6114268261142d565b6000806020838503121561148457600080fd5b823567ffffffffffffffff8082111561149c57600080fd5b818501915085601f8301126114b057600080fd5b8135818111156114bf57600080fd5b8660208260051b85010111156114d457600080fd5b60209290920196919550909350505050565b600080600080608085870312156114fc57600080fd5b8435935061150c6020860161142d565b925061151a6040860161142d565b91506115286060860161142d565b905092959194509250565b60006020828403121561154557600080fd5b5035919050565b60005b8381101561156757818101518382015260200161154f565b50506000910152565b6000815180845261158881602086016020860161154c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6060815260006115cd6060830186611570565b90508360208301527bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361166157611661611601565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600181811c908216806116ab57607f821691505b6020821081036116e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561173457600081815260208120601f850160051c810160208610156117115750805b601f850160051c820191505b818110156117305782815560010161171d565b5050505b505050565b600081357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8116811461176757600080fd5b92915050565b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe183360301811261179f57600080fd5b8201803567ffffffffffffffff8111156117b857600080fd5b602081360381840113156117cb57600080fd5b6117df826117d98654611697565b866116ea565b6000601f83116001811461183357600084156117fd57508482018301355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1786556118cc565b6000868152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0851690835b82811015611883578785018601358255938501936001909101908501611862565b50858210156118c0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88760031b161c198585890101351681555b505060018460011b0186555b505084013560018401555061193690506118e860408401611739565b600283017bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82167fffffffff000000000000000000000000000000000000000000000000000000008254161781555050565b5050565b600081516060845261194f6060850182611570565b9050602083015160208501527bffffffffffffffffffffffffffffffffffffffffffffffffffffffff60408401511660408501528091505092915050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015611a07577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08887030184526119f586835161193a565b955092840192908401906001016119bb565b509398975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1833603018112611a7857600080fd5b9190910192915050565b604081526000611a95604083018561193a565b8281036020840152611aa78185611570565b95945050505050565b600060208284031215611ac257600080fd5b81516003811061142657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b808202811582820484141761176757611767611601565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611b5557611b55611b17565b500490565b60006080820173ffffffffffffffffffffffffffffffffffffffff87168352602063ffffffff808816828601528087166040860152506080606085015281855180845260a08601915082870193506000805b82811015611bfd57855160038110611beb577f4e487b710000000000000000000000000000000000000000000000000000000083526021600452602483fd5b84529484019492840192600101611bac565b50919a9950505050505050505050565b600060208284031215611c1f57600080fd5b8151801515811461142657600080fd5b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff828116828216818102831692918115828504821417611c6d57611c6d611601565b50505092915050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff80841680611ca557611ca5611b17565b92169190910492915050565b6020815260006114266020830184611570565b600060208284031215611cd657600080fd5b815167ffffffffffffffff80821115611cee57600080fd5b818401915084601f830112611d0257600080fd5b815181811115611d1457611d14611668565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715611d5a57611d5a611668565b81604052828152876020848701011115611d7357600080fd5b611d8483602083016020880161154c565b97965050505050505056fea2646970667358221220d7b6a8cb97982abb0c2c4120b86f81c7b2840ad783bc38d697cb84eaf244285764736f6c63430008110033";

type ProblemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProblemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Problem__factory extends ContractFactory {
  constructor(...args: ProblemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Problem";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Problem> {
    return super.deploy(overrides || {}) as Promise<Problem>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Problem {
    return super.attach(address) as Problem;
  }
  connect(signer: Signer): Problem__factory {
    return super.connect(signer) as Problem__factory;
  }
  static readonly contractName: "Problem";
  public readonly contractName: "Problem";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProblemInterface {
    return new utils.Interface(_abi) as ProblemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Problem {
    return new Contract(address, _abi, signerOrProvider) as Problem;
  }
}
