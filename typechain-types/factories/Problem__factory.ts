/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Problem, ProblemInterface } from "../Problem";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "DeadlineUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "contestant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "solutionHash",
        type: "bytes32",
      },
    ],
    name: "DeclareSolutionHash",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "input",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "output",
            type: "bytes32",
          },
          {
            internalType: "uint224",
            name: "gasLimit",
            type: "uint224",
          },
        ],
        indexed: false,
        internalType: "struct TestCase[]",
        name: "tests",
        type: "tuple[]",
      },
    ],
    name: "NewTestVersion",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "contestant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "point",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isPreDeadlineSolution",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "enum Verdict[]",
        name: "verdicts",
        type: "uint8[]",
      },
    ],
    name: "RunSolution",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "contestant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isPreDeadlineSolution",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "address",
        name: "solution",
        type: "address",
      },
    ],
    name: "UpdateSolution",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_OUTPUT_SIZE",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "input",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "output",
            type: "bytes32",
          },
          {
            internalType: "uint224",
            name: "gasLimit",
            type: "uint224",
          },
        ],
        internalType: "struct TestCase",
        name: "test",
        type: "tuple",
      },
    ],
    name: "addTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "author",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "checker",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "contestants",
    outputs: [
      {
        internalType: "bytes32",
        name: "solutionHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "solutionPreDeadline",
        type: "address",
      },
      {
        internalType: "address",
        name: "solutionPosDeadline",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "pointPreDeadline",
        type: "uint24",
      },
      {
        internalType: "uint24",
        name: "pointPosDeadline",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deadline",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "solutionHash",
        type: "bytes32",
      },
    ],
    name: "declareSolutionHash",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gateFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contestant",
        type: "address",
      },
    ],
    name: "getContestantInfo",
    outputs: [
      {
        internalType: "bytes32",
        name: "solutionHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "solutionPreDeadline",
        type: "address",
      },
      {
        internalType: "address",
        name: "solutionPosDeadline",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "pointPreDeadline",
        type: "uint24",
      },
      {
        internalType: "uint24",
        name: "pointPosDeadline",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_author",
        type: "address",
      },
      {
        internalType: "address",
        name: "_checker",
        type: "address",
      },
      {
        internalType: "address",
        name: "_gateFactory",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "input",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "output",
            type: "bytes32",
          },
          {
            internalType: "uint224",
            name: "gasLimit",
            type: "uint224",
          },
        ],
        internalType: "struct TestCase[]",
        name: "newTests",
        type: "tuple[]",
      },
    ],
    name: "replaceTests",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contestant",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isBeforeDeadline",
        type: "bool",
      },
    ],
    name: "runSolution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256",
      },
    ],
    name: "setDeadline",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isPreDeadlineSolution",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "solutionBytecode",
        type: "bytes",
      },
    ],
    name: "submit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isPreDeadlineSolution",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "solutionBytecode",
        type: "bytes",
      },
    ],
    name: "submitAndRunSolution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "testLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "testVersion",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tests",
    outputs: [
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "output",
        type: "bytes32",
      },
      {
        internalType: "uint224",
        name: "gasLimit",
        type: "uint224",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061219f806100206000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063845170ec116100cd578063af640d0f11610081578063cf5303cf11610066578063cf5303cf14610426578063d088ca3a14610446578063de22c8d41461044f57600080fd5b8063af640d0f14610401578063bf65eba81461040a57600080fd5b8063a169d122116100b2578063a169d12214610320578063a6c3e6b9146103d2578063aba6fe46146103f857600080fd5b8063845170ec146102fa578063896077c51461030d57600080fd5b8063334f0f59116101245780636e4b8333116101095780636e4b8333146102c1578063754d1d54146102d457806381894def146102e757600080fd5b8063334f0f59146101df5780636470a639146101f257600080fd5b806307e491f514610156578063195199f61461016b57806329dcb0cf1461017e5780632f6c7ccc1461019a575b600080fd5b6101696101643660046116dc565b610471565b005b61016961017936600461171e565b61058c565b61018760075481565b6040519081526020015b60405180910390f35b6006546101ba9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610191565b6101696101ed366004611834565b610648565b6102786102003660046118d5565b600860205260009081526040902080546001820154600290920154909173ffffffffffffffffffffffffffffffffffffffff908116919081169062ffffff7401000000000000000000000000000000000000000082048116917701000000000000000000000000000000000000000000000090041685565b6040805195865273ffffffffffffffffffffffffffffffffffffffff9485166020870152939092169284019290925262ffffff918216606084015216608082015260a001610191565b6101696102cf3660046118f0565b61081c565b6101696102e2366004611965565b61095d565b6101696102f53660046119b2565b610b4e565b61016961030836600461171e565b610bc8565b61016961031b366004611834565b610c87565b61027861032e3660046118d5565b73ffffffffffffffffffffffffffffffffffffffff908116600090815260086020908152604091829020825160a08101845281548082526001830154861693820184905260029092015494851693810184905262ffffff740100000000000000000000000000000000000000008604811660608301819052770100000000000000000000000000000000000000000000009096041660809091018190529094919391565b6000546101ba9062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b61018760015481565b61018760045481565b6104136105dc81565b60405161ffff9091168152602001610191565b6005546101ba9073ffffffffffffffffffffffffffffffffffffffff1681565b61018760025481565b61046261045d36600461171e565b610ca1565b60405161019193929190611a4a565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff1633146104fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d73672e73656e646572206e6f7420617574686f72000000000000000000000060448201526064015b60405180910390fd5b60026000815461050c90611ac0565b909155506001805482916003916000918261052683611ac0565b91905055815260200190815260200160002081816105449190611bcd565b9050507fd47d89603b5f65c5893b4a688ddfc6f68a145f773ac60d9a23bc5d316f069fad600254610573610d6a565b604051610581929190611de9565b60405180910390a150565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff163314610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d73672e73656e646572206e6f7420617574686f72000000000000000000000060448201526064016104f4565b60078190556040518181527fdb00f0341e024be397e058a193a27b85cc3e7f921640be77ddf155c9f8d37c5a90602001610581565b6040805173ffffffffffffffffffffffffffffffffffffffff8516602082015260009161068e918391016040516020818303038152906040528051906020012084610f10565b905082156107675773ffffffffffffffffffffffffffffffffffffffff84811660009081526008602090815260409091206001810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169385169390931790925583519084012090548114610761576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e76616c696420736f6c7574696f6e2068617368000000000000000000000060448201526064016104f4565b506107be565b73ffffffffffffffffffffffffffffffffffffffff848116600090815260086020526040902060020180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169183169190911790555b6040805173ffffffffffffffffffffffffffffffffffffffff8681168252851515602083015283168183015290517fc7db9c128a69cb8d6973c2af190a7c471a2f3004971dafc7643d4beab74461c59181900360600190a150505050565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff1633146108a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d73672e73656e646572206e6f7420617574686f72000000000000000000000060448201526064016104f4565b6002600081546108b290611ac0565b9091555060005b81811015610910578282828181106108d3576108d3611e71565b90506020028101906108e59190611ea0565b60008281526003602052604090206108fd8282611bcd565b50610909905081611ac0565b90506108b9565b5060018190556002547fd47d89603b5f65c5893b4a688ddfc6f68a145f773ac60d9a23bc5d316f069fad90610943610d6a565b604051610951929190611de9565b60405180910390a15050565b600054610100900460ff161580801561097d5750600054600160ff909116105b806109975750303b158015610997575060005460ff166001145b610a23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104f4565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610a8157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b60048590556005805473ffffffffffffffffffffffffffffffffffffffff8086167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556006805492851692909116919091179055610ae484611078565b8015610b4757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b8015610b915773ffffffffffffffffffffffffffffffffffffffff8083166000908152600860205260409020600190810154610b8d928592911661115c565b5050565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260086020526040812060020154610b8d928592911661115c565b6001600754421115610c36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6f6e6c79206265666f726520646561646c696e6500000000000000000000000060448201526064016104f4565b3360008181526008602090815260409182902085905581518381529081018590527f3f7e81f1c8e479a52b2ec36c9a3df4d700ade5e5540b8303ebedfdd9aceeedc2910160405180910390a1505050565b610c92838383610648565b610c9c8383610b4e565b505050565b600360205260009081526040902080548190610cbc90611af8565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce890611af8565b8015610d355780601f10610d0a57610100808354040283529160200191610d35565b820191906000526020600020905b815481529060010190602001808311610d1857829003601f168201915b5050505060018301546002909301549192917bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16905083565b606060015467ffffffffffffffff811115610d8757610d87611770565b604051908082528060200260200182016040528015610df057816020015b60408051606080820183528152600060208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610da55790505b50905060005b8151811015610f0c5760008181526003602052604090819020815160608101909252805482908290610e2790611af8565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5390611af8565b8015610ea05780601f10610e7557610100808354040283529160200191610ea0565b820191906000526020600020905b815481529060010190602001808311610e8357829003601f168201915b5050509183525050600182015460208201526002909101547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166040909101528251839083908110610ef057610ef0611e71565b602002602001018190525080610f0590611ac0565b9050610df6565b5090565b60008084471015610f7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e636500000060448201526064016104f4565b8251600003610fe8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f60448201526064016104f4565b8383516020850187f5905073ffffffffffffffffffffffffffffffffffffffff8116611070576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f790000000000000060448201526064016104f4565b949350505050565b600054610100900460ff1661110f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016104f4565b6000805473ffffffffffffffffffffffffffffffffffffffff90921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b600154600090818167ffffffffffffffff81111561117c5761117c611770565b6040519080825280602002602001820160405280156111a5578160200160208202803683370190505b50905060005b8281101561141d576000818152600360205260408082208151606081019092528054829082906111da90611af8565b80601f016020809104026020016040519081016040528092919081815260200182805461120690611af8565b80156112535780601f1061122857610100808354040283529160200191611253565b820191906000526020600020905b81548152906001019060200180831161123657829003601f168201915b5050509183525050600182015460208201526002909101547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16604090910152905060008061129e8884611543565b915091508115611387576005546040517ffabc0e7c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063fabc0e7c906113009086908590600401611ede565b602060405180830381865afa15801561131d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113419190611f0c565b85858151811061135357611353611e71565b6020026020010190600281111561136c5761136c611f2d565b9081600281111561137f5761137f611f2d565b9052506113cb565b600285858151811061139b5761139b611e71565b602002602001019060028111156113b4576113b4611f2d565b908160028111156113c7576113c7611f2d565b9052505b60008585815181106113df576113df611e71565b602002602001015160028111156113f8576113f8611f2d565b036114095761140687611ac0565b96505b5050508061141690611ac0565b90506111ab565b5073ffffffffffffffffffffffffffffffffffffffff86166000908152600860205260408120908361145186612710611f5c565b61145b9190611fa2565b905086156114b0576002820180547fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000062ffffff8416021790556114fc565b6002820180547fffffffffffff000000ffffffffffffffffffffffffffffffffffffffffffffff167701000000000000000000000000000000000000000000000062ffffff8416021790555b7f513cda15eb3e6a8b83c0c5a3f01aa7e254cf058c407754a4f5bb210bc77803ee888289866040516115319493929190611fb6565b60405180910390a15050505050505050565b600060606116288460648560400151606561155e9190612066565b61156891906120ad565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166105dc6309c5eabe60e01b87600001516040516024016115a691906120e8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611651565b9092509050811561164a578080602001905181019061164791906120fb565b90505b9250929050565b6000606060008060008661ffff1667ffffffffffffffff81111561167757611677611770565b6040519080825280601f01601f1916602001820160405280156116a1576020820181803683370190505b50905060008087516020890160008d8df191503d9250868311156116c3578692505b828152826000602083013e909890975095505050505050565b6000602082840312156116ee57600080fd5b813567ffffffffffffffff81111561170557600080fd5b82016060818503121561171757600080fd5b9392505050565b60006020828403121561173057600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461175b57600080fd5b919050565b8035801515811461175b57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156117e6576117e6611770565b604052919050565b600067ffffffffffffffff82111561180857611808611770565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60008060006060848603121561184957600080fd5b61185284611737565b925061186060208501611760565b9150604084013567ffffffffffffffff81111561187c57600080fd5b8401601f8101861361188d57600080fd5b80356118a061189b826117ee565b61179f565b8181528760208385010111156118b557600080fd5b816020840160208301376000602083830101528093505050509250925092565b6000602082840312156118e757600080fd5b61171782611737565b6000806020838503121561190357600080fd5b823567ffffffffffffffff8082111561191b57600080fd5b818501915085601f83011261192f57600080fd5b81358181111561193e57600080fd5b8660208260051b850101111561195357600080fd5b60209290920196919550909350505050565b6000806000806080858703121561197b57600080fd5b8435935061198b60208601611737565b925061199960408601611737565b91506119a760608601611737565b905092959194509250565b600080604083850312156119c557600080fd5b6119ce83611737565b915061164760208401611760565b60005b838110156119f75781810151838201526020016119df565b50506000910152565b60008151808452611a188160208601602086016119dc565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606081526000611a5d6060830186611a00565b90508360208301527bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611af157611af1611a91565b5060010190565b600181811c90821680611b0c57607f821691505b602082108103611b45577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f821115610c9c57600081815260208120601f850160051c81016020861015611b725750805b601f850160051c820191505b81811015611b9157828155600101611b7e565b505050505050565b600081357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff81168114611bc757600080fd5b92915050565b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1833603018112611bff57600080fd5b8201803567ffffffffffffffff811115611c1857600080fd5b60208136038184011315611c2b57600080fd5b611c3f82611c398654611af8565b86611b4b565b6000601f831160018114611c935760008415611c5d57508482018301355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178655611d2c565b6000868152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0851690835b82811015611ce3578785018601358255938501936001909101908501611cc2565b5085821015611d20577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88760031b161c198585890101351681555b505060018460011b0186555b5050840135600184015550610b8d9050611d4860408401611b99565b600283017bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82167fffffffff000000000000000000000000000000000000000000000000000000008254161781555050565b6000815160608452611dab6060850182611a00565b9050602083015160208501527bffffffffffffffffffffffffffffffffffffffffffffffffffffffff60408401511660408501528091505092915050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015611e63577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018452611e51868351611d96565b95509284019290840190600101611e17565b509398975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1833603018112611ed457600080fd5b9190910192915050565b604081526000611ef16040830185611d96565b8281036020840152611f038185611a00565b95945050505050565b600060208284031215611f1e57600080fd5b81516003811061171757600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8082028115828204841417611bc757611bc7611a91565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611fb157611fb1611f73565b500490565b60006080820173ffffffffffffffffffffffffffffffffffffffff87168352602062ffffff87168185015285151560408501526080606085015281855180845260a08601915082870193506000805b8281101561205657855160038110612044577f4e487b710000000000000000000000000000000000000000000000000000000083526021600452602483fd5b84529484019492840192600101612005565b50919a9950505050505050505050565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8281168282168181028316929181158285048214176120a4576120a4611a91565b50505092915050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff808416806120dc576120dc611f73565b92169190910492915050565b6020815260006117176020830184611a00565b60006020828403121561210d57600080fd5b815167ffffffffffffffff81111561212457600080fd5b8201601f8101841361213557600080fd5b805161214361189b826117ee565b81815285602083850101111561215857600080fd5b611f038260208301602086016119dc56fea2646970667358221220baed44d754bf8098b043c17aed676cd9f14eb7a689ed0ef966601c48866a03b464736f6c63430008110033";

type ProblemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProblemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Problem__factory extends ContractFactory {
  constructor(...args: ProblemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Problem";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Problem> {
    return super.deploy(overrides || {}) as Promise<Problem>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Problem {
    return super.attach(address) as Problem;
  }
  connect(signer: Signer): Problem__factory {
    return super.connect(signer) as Problem__factory;
  }
  static readonly contractName: "Problem";
  public readonly contractName: "Problem";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProblemInterface {
    return new utils.Interface(_abi) as ProblemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Problem {
    return new Contract(address, _abi, signerOrProvider) as Problem;
  }
}
