/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Problem, ProblemInterface } from "../Problem";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "contestant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "solutionHash",
        type: "bytes32",
      },
    ],
    name: "DeclareSolutionHash",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "input",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "output",
            type: "bytes32",
          },
          {
            internalType: "uint224",
            name: "gasLimit",
            type: "uint224",
          },
        ],
        indexed: false,
        internalType: "struct TestCase[]",
        name: "tests",
        type: "tuple[]",
      },
    ],
    name: "NewTestVersion",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "contestant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "point",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isPreDeadlineSolution",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "enum Verdict[]",
        name: "verdicts",
        type: "uint8[]",
      },
    ],
    name: "RunSolution",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "contestant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isPreDeadlineSolution",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "address",
        name: "solution",
        type: "address",
      },
    ],
    name: "UpdateSolution",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_OUTPUT_SIZE",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "input",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "output",
            type: "bytes32",
          },
          {
            internalType: "uint224",
            name: "gasLimit",
            type: "uint224",
          },
        ],
        internalType: "struct TestCase",
        name: "test",
        type: "tuple",
      },
    ],
    name: "addTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "author",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "checker",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "contestants",
    outputs: [
      {
        internalType: "bytes32",
        name: "solutionHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "solutionPreDeadline",
        type: "address",
      },
      {
        internalType: "address",
        name: "solutionPosDeadline",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "pointPreDeadline",
        type: "uint24",
      },
      {
        internalType: "uint24",
        name: "pointPosDeadline",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deadline",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "solutionHash",
        type: "bytes32",
      },
    ],
    name: "declareSolutionHash",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gateFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contestant",
        type: "address",
      },
    ],
    name: "getContestantInfo",
    outputs: [
      {
        internalType: "bytes32",
        name: "solutionHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "solutionPreDeadline",
        type: "address",
      },
      {
        internalType: "address",
        name: "solutionPosDeadline",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "pointPreDeadline",
        type: "uint24",
      },
      {
        internalType: "uint24",
        name: "pointPosDeadline",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_author",
        type: "address",
      },
      {
        internalType: "address",
        name: "_checker",
        type: "address",
      },
      {
        internalType: "address",
        name: "_gateFactory",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "input",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "output",
            type: "bytes32",
          },
          {
            internalType: "uint224",
            name: "gasLimit",
            type: "uint224",
          },
        ],
        internalType: "struct TestCase[]",
        name: "newTests",
        type: "tuple[]",
      },
    ],
    name: "replaceTests",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isPreDeadlineSolution",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "solutionBytecode",
        type: "bytes",
      },
    ],
    name: "submit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "testLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "testVersion",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tests",
    outputs: [
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "output",
        type: "bytes32",
      },
      {
        internalType: "uint224",
        name: "gasLimit",
        type: "uint224",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061171c806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063a169d12211610097578063bf65eba811610066578063bf65eba814610380578063cf5303cf1461039c578063d088ca3a146103bc578063de22c8d4146103c557600080fd5b8063a169d12214610296578063a6c3e6b914610348578063aba6fe461461036e578063af640d0f1461037757600080fd5b80636470a639116100d35780636470a6391461018e5780636e4b83331461025d578063754d1d5414610270578063845170ec1461028357600080fd5b806307e491f51461010557806329dcb0cf1461011a5780632f6c7ccc14610136578063334f0f591461017b575b600080fd5b610118610113366004610f82565b6103e7565b005b61012360075481565b6040519081526020015b60405180910390f35b6006546101569073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161012d565b61011861018936600461101c565b610502565b61021461019c366004611113565b600860205260009081526040902080546001820154600290920154909173ffffffffffffffffffffffffffffffffffffffff908116919081169062ffffff7401000000000000000000000000000000000000000082048116917701000000000000000000000000000000000000000000000090041685565b6040805195865273ffffffffffffffffffffffffffffffffffffffff9485166020870152939092169284019290925262ffffff918216606084015216608082015260a00161012d565b61011861026b36600461112e565b6106d6565b61011861027e3660046111a3565b610817565b6101186102913660046111f0565b610a08565b6102146102a4366004611113565b73ffffffffffffffffffffffffffffffffffffffff908116600090815260086020908152604091829020825160a08101845281548082526001830154861693820184905260029092015494851693810184905262ffffff740100000000000000000000000000000000000000008604811660608301819052770100000000000000000000000000000000000000000000009096041660809091018190529094919391565b6000546101569062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b61012360015481565b61012360045481565b6103896105dc81565b60405161ffff909116815260200161012d565b6005546101569073ffffffffffffffffffffffffffffffffffffffff1681565b61012360025481565b6103d86103d33660046111f0565b610ac7565b60405161012d9392919061126d565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff163314610473576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d73672e73656e646572206e6f7420617574686f72000000000000000000000060448201526064015b60405180910390fd5b600260008154610482906112b4565b909155506001805482916003916000918261049c836112b4565b91905055815260200190815260200160002081816104ba91906113e9565b9050507fd47d89603b5f65c5893b4a688ddfc6f68a145f773ac60d9a23bc5d316f069fad6002546104e9610b90565b6040516104f79291906115b6565b60405180910390a150565b6040805173ffffffffffffffffffffffffffffffffffffffff85166020820152600091610548918391016040516020818303038152906040528051906020012084610d36565b905082156106215773ffffffffffffffffffffffffffffffffffffffff84811660009081526008602090815260409091206001810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016938516939093179092558351908401209054811461061b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e76616c696420736f6c7574696f6e20686173680000000000000000000000604482015260640161046a565b50610678565b73ffffffffffffffffffffffffffffffffffffffff848116600090815260086020526040902060020180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169183169190911790555b6040805173ffffffffffffffffffffffffffffffffffffffff8681168252851515602083015283168183015290517fc7db9c128a69cb8d6973c2af190a7c471a2f3004971dafc7643d4beab74461c59181900360600190a150505050565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff16331461075d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d73672e73656e646572206e6f7420617574686f720000000000000000000000604482015260640161046a565b60026000815461076c906112b4565b9091555060005b818110156107ca5782828281811061078d5761078d611679565b905060200281019061079f91906116a8565b60008281526003602052604090206107b782826113e9565b506107c39050816112b4565b9050610773565b5060018190556002547fd47d89603b5f65c5893b4a688ddfc6f68a145f773ac60d9a23bc5d316f069fad906107fd610b90565b60405161080b9291906115b6565b60405180910390a15050565b600054610100900460ff16158080156108375750600054600160ff909116105b806108515750303b158015610851575060005460ff166001145b6108dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161046a565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561093b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b60048590556005805473ffffffffffffffffffffffffffffffffffffffff8086167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600680549285169290911691909117905561099e84610e9e565b8015610a0157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6001600754421115610a76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6f6e6c79206265666f726520646561646c696e65000000000000000000000000604482015260640161046a565b3360008181526008602090815260409182902085905581518381529081018590527f3f7e81f1c8e479a52b2ec36c9a3df4d700ade5e5540b8303ebedfdd9aceeedc2910160405180910390a1505050565b600360205260009081526040902080548190610ae290611313565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0e90611313565b8015610b5b5780601f10610b3057610100808354040283529160200191610b5b565b820191906000526020600020905b815481529060010190602001808311610b3e57829003601f168201915b5050505060018301546002909301549192917bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16905083565b606060015467ffffffffffffffff811115610bad57610bad610fed565b604051908082528060200260200182016040528015610c1657816020015b60408051606080820183528152600060208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610bcb5790505b50905060005b8151811015610d325760008181526003602052604090819020815160608101909252805482908290610c4d90611313565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7990611313565b8015610cc65780601f10610c9b57610100808354040283529160200191610cc6565b820191906000526020600020905b815481529060010190602001808311610ca957829003601f168201915b5050509183525050600182015460208201526002909101547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166040909101528251839083908110610d1657610d16611679565b602002602001018190525080610d2b906112b4565b9050610c1c565b5090565b60008084471015610da3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604482015260640161046a565b8251600003610e0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015260640161046a565b8383516020850187f5905073ffffffffffffffffffffffffffffffffffffffff8116610e96576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604482015260640161046a565b949350505050565b600054610100900460ff16610f35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161046a565b6000805473ffffffffffffffffffffffffffffffffffffffff90921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b600060208284031215610f9457600080fd5b813567ffffffffffffffff811115610fab57600080fd5b820160608185031215610fbd57600080fd5b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610fe857600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060006060848603121561103157600080fd5b61103a84610fc4565b92506020840135801515811461104f57600080fd5b9150604084013567ffffffffffffffff8082111561106c57600080fd5b818601915086601f83011261108057600080fd5b81358181111561109257611092610fed565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156110d8576110d8610fed565b816040528281528960208487010111156110f157600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561112557600080fd5b610fbd82610fc4565b6000806020838503121561114157600080fd5b823567ffffffffffffffff8082111561115957600080fd5b818501915085601f83011261116d57600080fd5b81358181111561117c57600080fd5b8660208260051b850101111561119157600080fd5b60209290920196919550909350505050565b600080600080608085870312156111b957600080fd5b843593506111c960208601610fc4565b92506111d760408601610fc4565b91506111e560608601610fc4565b905092959194509250565b60006020828403121561120257600080fd5b5035919050565b6000815180845260005b8181101561122f57602081850181015186830182015201611213565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6060815260006112806060830186611209565b90508360208301527bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361130c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b600181811c9082168061132757607f821691505b602082108103611360577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f8211156113b057600081815260208120601f850160051c8101602086101561138d5750805b601f850160051c820191505b818110156113ac57828155600101611399565b5050505b505050565b600081357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811681146113e357600080fd5b92915050565b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe183360301811261141b57600080fd5b8201803567ffffffffffffffff81111561143457600080fd5b6020813603818401131561144757600080fd5b61145b826114558654611313565b86611366565b6000601f8311600181146114af576000841561147957508482018301355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178655611548565b6000868152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0851690835b828110156114ff5787850186013582559385019360019091019085016114de565b508582101561153c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88760031b161c198585890101351681555b505060018460011b0186555b50508401356001840155506115b29050611564604084016113b5565b600283017bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82167fffffffff000000000000000000000000000000000000000000000000000000008254161781555050565b5050565b6000604080830185845260208281860152818651808452606093508387019150838160051b88010183890160005b83811015611669577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08a84030185528151805188855261162689860182611209565b82890151868a0152918a01517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16948a0194909452948601949250908501906001016115e4565b50909a9950505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18336030181126116dc57600080fd5b919091019291505056fea26469706673582212209c09e3242a3d55fd5ce7c2b5d87ffa3870c038c0794d1060d0feb771eea34f7764736f6c63430008110033";

type ProblemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProblemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Problem__factory extends ContractFactory {
  constructor(...args: ProblemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Problem";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Problem> {
    return super.deploy(overrides || {}) as Promise<Problem>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Problem {
    return super.attach(address) as Problem;
  }
  connect(signer: Signer): Problem__factory {
    return super.connect(signer) as Problem__factory;
  }
  static readonly contractName: "Problem";
  public readonly contractName: "Problem";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProblemInterface {
    return new utils.Interface(_abi) as ProblemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Problem {
    return new Contract(address, _abi, signerOrProvider) as Problem;
  }
}
