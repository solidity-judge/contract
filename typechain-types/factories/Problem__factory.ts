/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Problem, ProblemInterface } from "../Problem";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "input",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "output",
            type: "bytes32",
          },
          {
            internalType: "uint224",
            name: "gasLimit",
            type: "uint224",
          },
        ],
        indexed: false,
        internalType: "struct TestCase[]",
        name: "tests",
        type: "tuple[]",
      },
    ],
    name: "NewTestVersion",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "contestant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "point",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "enum Verdict[]",
        name: "verdicts",
        type: "uint8[]",
      },
    ],
    name: "RunSolution",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "contestant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "solution",
        type: "address",
      },
    ],
    name: "UpdateSolution",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_OUTPUT_SIZE",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "input",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "output",
            type: "bytes32",
          },
          {
            internalType: "uint224",
            name: "gasLimit",
            type: "uint224",
          },
        ],
        internalType: "struct TestCase",
        name: "test",
        type: "tuple",
      },
    ],
    name: "addTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "author",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "checker",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "contestants",
    outputs: [
      {
        internalType: "address",
        name: "solution",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "point",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "version",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gateFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contestant",
        type: "address",
      },
    ],
    name: "getContestantInfo",
    outputs: [
      {
        internalType: "address",
        name: "solution",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "point",
        type: "uint32",
      },
      {
        internalType: "bool",
        name: "isPointUpToDate",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_author",
        type: "address",
      },
      {
        internalType: "address",
        name: "_checker",
        type: "address",
      },
      {
        internalType: "address",
        name: "_gateFactory",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "input",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "output",
            type: "bytes32",
          },
          {
            internalType: "uint224",
            name: "gasLimit",
            type: "uint224",
          },
        ],
        internalType: "struct TestCase[]",
        name: "newTests",
        type: "tuple[]",
      },
    ],
    name: "replaceTests",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contestant",
        type: "address",
      },
    ],
    name: "runSolution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "testLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "testVersion",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tests",
    outputs: [
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "output",
        type: "bytes32",
      },
      {
        internalType: "uint224",
        name: "gasLimit",
        type: "uint224",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "solution",
        type: "address",
      },
    ],
    name: "updateAndRunSolution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "solution",
        type: "address",
      },
    ],
    name: "updateSolution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611c62806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063a169d12211610097578063bf65eba811610066578063bf65eba81461038f578063cf5303cf146103ab578063d088ca3a146103cb578063de22c8d4146103d457600080fd5b8063a169d12214610271578063a6c3e6b914610349578063aba6fe461461036f578063af640d0f1461038657600080fd5b80636e4b8333116100d35780636e4b833314610225578063754d1d541461023857806398f8062b1461024b5780639e35122c1461025e57600080fd5b806307e491f514610105578063186280181461011a5780632f6c7ccc1461012d5780636470a63914610177575b600080fd5b61011861011336600461135d565b6103f6565b005b6101186101283660046113c8565b610511565b60065461014d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101ec6101853660046113c8565b60076020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff81169063ffffffff740100000000000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041683565b6040805173ffffffffffffffffffffffffffffffffffffffff909416845263ffffffff928316602085015291169082015260600161016e565b6101186102333660046113e3565b610526565b610118610246366004611458565b610667565b6101186102593660046113c8565b610858565b61011861026c3660046113c8565b610d0a565b61031061027f3660046113c8565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152600760209081526040918290208251606081018452905493841680825263ffffffff7401000000000000000000000000000000000000000086048116938301849052780100000000000000000000000000000000000000000000000090950490941692018290526002549293909290911490565b6040805173ffffffffffffffffffffffffffffffffffffffff909416845263ffffffff909216602084015215159082015260600161016e565b60005461014d9062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b61037860015481565b60405190815260200161016e565b61037860045481565b6103986105dc81565b60405161ffff909116815260200161016e565b60055461014d9073ffffffffffffffffffffffffffffffffffffffff1681565b61037860025481565b6103e76103e23660046114a5565b610e8f565b60405161016e93929190611522565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff163314610482576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d73672e73656e646572206e6f7420617574686f72000000000000000000000060448201526064015b60405180910390fd5b60026000815461049190611598565b90915550600180548291600391600091826104ab83611598565b91905055815260200190815260200160002081816104c991906116d5565b9050507fd47d89603b5f65c5893b4a688ddfc6f68a145f773ac60d9a23bc5d316f069fad6002546104f8610f58565b6040516105069291906118f5565b60405180910390a150565b61051a81610d0a565b61052333610858565b50565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff1633146105ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d73672e73656e646572206e6f7420617574686f7200000000000000000000006044820152606401610479565b6002600081546105bc90611598565b9091555060005b8181101561061a578282828181106105dd576105dd61197d565b90506020028101906105ef91906119ac565b600082815260036020526040902061060782826116d5565b50610613905081611598565b90506105c3565b5060018190556002547fd47d89603b5f65c5893b4a688ddfc6f68a145f773ac60d9a23bc5d316f069fad9061064d610f58565b60405161065b9291906118f5565b60405180910390a15050565b600054610100900460ff16158080156106875750600054600160ff909116105b806106a15750303b1580156106a1575060005460ff166001145b61072d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610479565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561078b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b60048590556005805473ffffffffffffffffffffffffffffffffffffffff8086167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560068054928516929091169190911790556107ee846110fe565b801561085157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b73ffffffffffffffffffffffffffffffffffffffff80821660009081526007602052604090205416806108e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f736f6c7574696f6e206e6f74207375626d6974746564000000000000000000006044820152606401610479565b600154600090818167ffffffffffffffff811115610907576109076115d0565b604051908082528060200260200182016040528015610930578160200160208202803683370190505b50905060005b82811015610ba857600081815260036020526040808220815160608101909252805482908290610965906115ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610991906115ff565b80156109de5780601f106109b3576101008083540402835291602001916109de565b820191906000526020600020905b8154815290600101906020018083116109c157829003601f168201915b5050509183525050600182015460208201526002909101547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166040909101529050600080610a2988846111e2565b915091508115610b12576005546040517ffabc0e7c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063fabc0e7c90610a8b90869085906004016119ea565b602060405180830381865afa158015610aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acc9190611a18565b858581518110610ade57610ade61197d565b60200260200101906002811115610af757610af7611a39565b90816002811115610b0a57610b0a611a39565b905250610b56565b6002858581518110610b2657610b2661197d565b60200260200101906002811115610b3f57610b3f611a39565b90816002811115610b5257610b52611a39565b9052505b6000858581518110610b6a57610b6a61197d565b60200260200101516002811115610b8357610b83611a39565b03610b9457610b9187611598565b96505b50505080610ba190611598565b9050610936565b50600060405180606001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018486612710610be19190611a68565b610beb9190611aae565b63ffffffff9081168252600254811660209283015273ffffffffffffffffffffffffffffffffffffffff898116600090815260078452604090819020855181549587015187840151919094167fffffffffffffffff000000000000000000000000000000000000000000000000909616959095177401000000000000000000000000000000000000000084861602177fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff167801000000000000000000000000000000000000000000000000948616949094029390931790925590519293507fbfdb0988ea5adc6cf3c05a9bd3bce7c93cd42aebe39c5127f354909ae413178e92610cfa928a9290918790611ac2565b60405180910390a1505050505050565b6006546040517f0ef3a37800000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015290911690630ef3a37890604401602060405180830381865afa158015610d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da49190611b75565b610e0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f696e76616c696420736f6c7574696f6e000000000000000000000000000000006044820152606401610479565b3360008181526007602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86169081179091558251938452908301527f8d26994047325d86771f1db98015f3be8a8aeb8b0484fca863ec6ff4c639c6109101610506565b600360205260009081526040902080548190610eaa906115ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed6906115ff565b8015610f235780601f10610ef857610100808354040283529160200191610f23565b820191906000526020600020905b815481529060010190602001808311610f0657829003601f168201915b5050505060018301546002909301549192917bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16905083565b606060015467ffffffffffffffff811115610f7557610f756115d0565b604051908082528060200260200182016040528015610fde57816020015b60408051606080820183528152600060208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610f935790505b50905060005b81518110156110fa5760008181526003602052604090819020815160608101909252805482908290611015906115ff565b80601f0160208091040260200160405190810160405280929190818152602001828054611041906115ff565b801561108e5780601f106110635761010080835404028352916020019161108e565b820191906000526020600020905b81548152906001019060200180831161107157829003601f168201915b5050509183525050600182015460208201526002909101547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660409091015282518390839081106110de576110de61197d565b6020026020010181905250806110f390611598565b9050610fe4565b5090565b600054610100900460ff16611195576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610479565b6000805473ffffffffffffffffffffffffffffffffffffffff90921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b600060606112c7846064856040015160656111fd9190611b97565b6112079190611bde565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166105dc6309c5eabe60e01b87600001516040516024016112459190611c19565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526112d2565b915091509250929050565b6000606060008060008661ffff1667ffffffffffffffff8111156112f8576112f86115d0565b6040519080825280601f01601f191660200182016040528015611322576020820181803683370190505b50905060008087516020890160008d8df191503d925086831115611344578692505b828152826000602083013e909890975095505050505050565b60006020828403121561136f57600080fd5b813567ffffffffffffffff81111561138657600080fd5b82016060818503121561139857600080fd5b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146113c357600080fd5b919050565b6000602082840312156113da57600080fd5b6113988261139f565b600080602083850312156113f657600080fd5b823567ffffffffffffffff8082111561140e57600080fd5b818501915085601f83011261142257600080fd5b81358181111561143157600080fd5b8660208260051b850101111561144657600080fd5b60209290920196919550909350505050565b6000806000806080858703121561146e57600080fd5b8435935061147e6020860161139f565b925061148c6040860161139f565b915061149a6060860161139f565b905092959194509250565b6000602082840312156114b757600080fd5b5035919050565b6000815180845260005b818110156114e4576020818501810151868301820152016114c8565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60608152600061153560608301866114be565b90508360208301527bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036115c9576115c9611569565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600181811c9082168061161357607f821691505b60208210810361164c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561169c57600081815260208120601f850160051c810160208610156116795750805b601f850160051c820191505b8181101561169857828155600101611685565b5050505b505050565b600081357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811681146116cf57600080fd5b92915050565b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe183360301811261170757600080fd5b8201803567ffffffffffffffff81111561172057600080fd5b6020813603818401131561173357600080fd5b6117478261174186546115ff565b86611652565b6000601f83116001811461179b576000841561176557508482018301355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178655611834565b6000868152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0851690835b828110156117eb5787850186013582559385019360019091019085016117ca565b5085821015611828577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88760031b161c198585890101351681555b505060018460011b0186555b505084013560018401555061189e9050611850604084016116a1565b600283017bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82167fffffffff000000000000000000000000000000000000000000000000000000008254161781555050565b5050565b60008151606084526118b760608501826114be565b9050602083015160208501527bffffffffffffffffffffffffffffffffffffffffffffffffffffffff60408401511660408501528091505092915050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b8281101561196f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa088870301845261195d8683516118a2565b95509284019290840190600101611923565b509398975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18336030181126119e057600080fd5b9190910192915050565b6040815260006119fd60408301856118a2565b8281036020840152611a0f81856114be565b95945050505050565b600060208284031215611a2a57600080fd5b81516003811061139857600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b80820281158282048414176116cf576116cf611569565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611abd57611abd611a7f565b500490565b60006080820173ffffffffffffffffffffffffffffffffffffffff87168352602063ffffffff808816828601528087166040860152506080606085015281855180845260a08601915082870193506000805b82811015611b6557855160038110611b53577f4e487b710000000000000000000000000000000000000000000000000000000083526021600452602483fd5b84529484019492840192600101611b14565b50919a9950505050505050505050565b600060208284031215611b8757600080fd5b8151801515811461139857600080fd5b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff828116828216818102831692918115828504821417611bd557611bd5611569565b50505092915050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff80841680611c0d57611c0d611a7f565b92169190910492915050565b60208152600061139860208301846114be56fea2646970667358221220b92b58bd38db632034aa6436bc8f2911518318d645bcc53dc2675bd91933e2d464736f6c63430008110033";

type ProblemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProblemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Problem__factory extends ContractFactory {
  constructor(...args: ProblemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Problem";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Problem> {
    return super.deploy(overrides || {}) as Promise<Problem>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Problem {
    return super.attach(address) as Problem;
  }
  connect(signer: Signer): Problem__factory {
    return super.connect(signer) as Problem__factory;
  }
  static readonly contractName: "Problem";
  public readonly contractName: "Problem";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProblemInterface {
    return new utils.Interface(_abi) as ProblemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Problem {
    return new Contract(address, _abi, signerOrProvider) as Problem;
  }
}
