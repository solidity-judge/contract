/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type TestCaseStruct = {
  input: BytesLike;
  output: BytesLike;
  gasLimit: BigNumberish;
};

export type TestCaseStructOutput = [string, string, BigNumber] & {
  input: string;
  output: string;
  gasLimit: BigNumber;
};

export interface ProblemInterface extends utils.Interface {
  contractName: "Problem";
  functions: {
    "MAX_OUTPUT_SIZE()": FunctionFragment;
    "_updateSolution(address,address)": FunctionFragment;
    "addTest((bytes,bytes32,uint224))": FunctionFragment;
    "author()": FunctionFragment;
    "checker()": FunctionFragment;
    "contestants(address)": FunctionFragment;
    "gateFactory()": FunctionFragment;
    "gateUpdateAndRunSolution(address)": FunctionFragment;
    "getContestantInfo(address)": FunctionFragment;
    "id()": FunctionFragment;
    "initialize(uint256,address,address,address)": FunctionFragment;
    "modifyChecker(address)": FunctionFragment;
    "replaceTests((bytes,bytes32,uint224)[])": FunctionFragment;
    "runSolution(address)": FunctionFragment;
    "testLength()": FunctionFragment;
    "testVersion()": FunctionFragment;
    "tests(uint256)": FunctionFragment;
    "updateAndRunSolution(address)": FunctionFragment;
    "updateSolution(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_OUTPUT_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_updateSolution",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addTest",
    values: [TestCaseStruct]
  ): string;
  encodeFunctionData(functionFragment: "author", values?: undefined): string;
  encodeFunctionData(functionFragment: "checker", values?: undefined): string;
  encodeFunctionData(functionFragment: "contestants", values: [string]): string;
  encodeFunctionData(
    functionFragment: "gateFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gateUpdateAndRunSolution",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getContestantInfo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyChecker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceTests",
    values: [TestCaseStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "runSolution", values: [string]): string;
  encodeFunctionData(
    functionFragment: "testLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tests", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "updateAndRunSolution",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSolution",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_OUTPUT_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_updateSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addTest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "author", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contestants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gateFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gateUpdateAndRunSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContestantInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifyChecker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceTests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "runSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAndRunSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSolution",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "NewTestVersion(uint256,tuple[])": EventFragment;
    "RunSolution(address,uint256,uint256,uint8[])": EventFragment;
    "UpdateSolution(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTestVersion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RunSolution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateSolution"): EventFragment;
}

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type NewTestVersionEvent = TypedEvent<
  [BigNumber, TestCaseStructOutput[]],
  { version: BigNumber; tests: TestCaseStructOutput[] }
>;

export type NewTestVersionEventFilter = TypedEventFilter<NewTestVersionEvent>;

export type RunSolutionEvent = TypedEvent<
  [string, BigNumber, BigNumber, number[]],
  {
    contestant: string;
    version: BigNumber;
    point: BigNumber;
    verdicts: number[];
  }
>;

export type RunSolutionEventFilter = TypedEventFilter<RunSolutionEvent>;

export type UpdateSolutionEvent = TypedEvent<
  [string, string],
  { contestant: string; solution: string }
>;

export type UpdateSolutionEventFilter = TypedEventFilter<UpdateSolutionEvent>;

export interface Problem extends BaseContract {
  contractName: "Problem";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProblemInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_OUTPUT_SIZE(overrides?: CallOverrides): Promise<[number]>;

    _updateSolution(
      user: string,
      solution: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTest(
      test: TestCaseStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    author(overrides?: CallOverrides): Promise<[string]>;

    checker(overrides?: CallOverrides): Promise<[string]>;

    contestants(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        solution: string;
        point: number;
        version: number;
      }
    >;

    gateFactory(overrides?: CallOverrides): Promise<[string]>;

    gateUpdateAndRunSolution(
      solution: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getContestantInfo(
      contestant: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, boolean] & {
        solution: string;
        point: number;
        isPointUpToDate: boolean;
      }
    >;

    id(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _id: BigNumberish,
      _author: string,
      _checker: string,
      _gateFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    modifyChecker(
      newChecker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    replaceTests(
      newTests: TestCaseStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    runSolution(
      contestant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    testVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    tests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        input: string;
        output: string;
        gasLimit: BigNumber;
      }
    >;

    updateAndRunSolution(
      solution: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSolution(
      solution: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_OUTPUT_SIZE(overrides?: CallOverrides): Promise<number>;

  _updateSolution(
    user: string,
    solution: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTest(
    test: TestCaseStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  author(overrides?: CallOverrides): Promise<string>;

  checker(overrides?: CallOverrides): Promise<string>;

  contestants(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number] & {
      solution: string;
      point: number;
      version: number;
    }
  >;

  gateFactory(overrides?: CallOverrides): Promise<string>;

  gateUpdateAndRunSolution(
    solution: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getContestantInfo(
    contestant: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, boolean] & {
      solution: string;
      point: number;
      isPointUpToDate: boolean;
    }
  >;

  id(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _id: BigNumberish,
    _author: string,
    _checker: string,
    _gateFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  modifyChecker(
    newChecker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  replaceTests(
    newTests: TestCaseStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  runSolution(
    contestant: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testLength(overrides?: CallOverrides): Promise<BigNumber>;

  testVersion(overrides?: CallOverrides): Promise<BigNumber>;

  tests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      input: string;
      output: string;
      gasLimit: BigNumber;
    }
  >;

  updateAndRunSolution(
    solution: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSolution(
    solution: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_OUTPUT_SIZE(overrides?: CallOverrides): Promise<number>;

    _updateSolution(
      user: string,
      solution: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addTest(test: TestCaseStruct, overrides?: CallOverrides): Promise<void>;

    author(overrides?: CallOverrides): Promise<string>;

    checker(overrides?: CallOverrides): Promise<string>;

    contestants(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        solution: string;
        point: number;
        version: number;
      }
    >;

    gateFactory(overrides?: CallOverrides): Promise<string>;

    gateUpdateAndRunSolution(
      solution: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getContestantInfo(
      contestant: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, boolean] & {
        solution: string;
        point: number;
        isPointUpToDate: boolean;
      }
    >;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _id: BigNumberish,
      _author: string,
      _checker: string,
      _gateFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    modifyChecker(newChecker: string, overrides?: CallOverrides): Promise<void>;

    replaceTests(
      newTests: TestCaseStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    runSolution(contestant: string, overrides?: CallOverrides): Promise<void>;

    testLength(overrides?: CallOverrides): Promise<BigNumber>;

    testVersion(overrides?: CallOverrides): Promise<BigNumber>;

    tests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        input: string;
        output: string;
        gasLimit: BigNumber;
      }
    >;

    updateAndRunSolution(
      solution: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSolution(solution: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewTestVersion(uint256,tuple[])"(
      version?: null,
      tests?: null
    ): NewTestVersionEventFilter;
    NewTestVersion(version?: null, tests?: null): NewTestVersionEventFilter;

    "RunSolution(address,uint256,uint256,uint8[])"(
      contestant?: null,
      version?: null,
      point?: null,
      verdicts?: null
    ): RunSolutionEventFilter;
    RunSolution(
      contestant?: null,
      version?: null,
      point?: null,
      verdicts?: null
    ): RunSolutionEventFilter;

    "UpdateSolution(address,address)"(
      contestant?: null,
      solution?: null
    ): UpdateSolutionEventFilter;
    UpdateSolution(
      contestant?: null,
      solution?: null
    ): UpdateSolutionEventFilter;
  };

  estimateGas: {
    MAX_OUTPUT_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    _updateSolution(
      user: string,
      solution: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTest(
      test: TestCaseStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    author(overrides?: CallOverrides): Promise<BigNumber>;

    checker(overrides?: CallOverrides): Promise<BigNumber>;

    contestants(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    gateFactory(overrides?: CallOverrides): Promise<BigNumber>;

    gateUpdateAndRunSolution(
      solution: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getContestantInfo(
      contestant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _id: BigNumberish,
      _author: string,
      _checker: string,
      _gateFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    modifyChecker(
      newChecker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    replaceTests(
      newTests: TestCaseStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    runSolution(
      contestant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testLength(overrides?: CallOverrides): Promise<BigNumber>;

    testVersion(overrides?: CallOverrides): Promise<BigNumber>;

    tests(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    updateAndRunSolution(
      solution: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSolution(
      solution: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_OUTPUT_SIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _updateSolution(
      user: string,
      solution: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTest(
      test: TestCaseStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    author(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contestants(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gateFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gateUpdateAndRunSolution(
      solution: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getContestantInfo(
      contestant: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _id: BigNumberish,
      _author: string,
      _checker: string,
      _gateFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    modifyChecker(
      newChecker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    replaceTests(
      newTests: TestCaseStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    runSolution(
      contestant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateAndRunSolution(
      solution: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSolution(
      solution: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
