{"version":3,"file":"sdk.cjs.production.min.js","sources":["../SDK/type.ts","../SDK/helper.ts","../SDK/subgraph/user.ts","../SDK/entities/User.ts","../SDK/consts.ts","../SDK/entities/Problem.ts"],"sourcesContent":["import { BigNumber, BigNumberish, CallOverrides, Contract, ethers } from 'ethers';\n\nexport type RpcSigner = ethers.Signer;\n\nexport type SubmissionResultRaw = {\n    contestant: string;\n    isPreDeadlineSolution: boolean;\n    point: BigNumber;\n    verdicts: number[];\n};\n\nexport enum TestCaseVerdict {\n    Accepted = 0,\n    WrongAnswer = 1,\n    Revert = 2,\n}\n\nexport type TestCase = {\n    input: string[];\n    gasLimit: number;\n};\n\nexport type SubmissionResult = {\n    contestant: string;\n    version: number;\n    isPreDeadlineSolution: boolean;\n    point: number;\n    verdicts: TestCaseVerdict[];\n    tests: TestCase[];\n};\n","let solComp: any = null;\n\nif (typeof window !== 'undefined') {\n    solComp = require('@agnostico/browser-solidity-compiler');\n}\n\nexport function isSameAddress(a: string, b: string) {\n    return a.toLowerCase() === b.toLowerCase();\n}\n\nlet compilerVersion = '';\nexport async function getCompilerVersion() {\n    if (compilerVersion !== '') {\n        return compilerVersion;\n    }\n    const results = (await solComp.getCompilerVersions()) as any;\n    compilerVersion = results.releases[results.latestRelease];\n    return compilerVersion;\n}\n\nexport async function compileSolidity(source: string) {\n    const version = await getCompilerVersion();\n    const output = (await solComp.solidityCompiler({\n        version: `https://binaries.soliditylang.org/bin/${version}`,\n        contractBody: source,\n    })) as any;\n    const allErrors: {\n        severity: string;\n        formattedMessage: string;\n        errorCode: string;\n    }[] = output['errors'] ?? [];\n\n    const errors = allErrors.filter((x) => x.severity === 'error');\n\n    if (errors.length > 0) {\n        return {\n            bytecode: '',\n            errors: errors.map((x) => {\n                return {\n                    msg: x.formattedMessage,\n                    code: x.errorCode,\n                };\n            }),\n        };\n    }\n\n    const contracts = output.contracts.Compiled_Contracts;\n    for (const contractName in contracts) {\n        return {\n            bytecode: '0x' + contracts[contractName].evm.bytecode.object,\n            errors: [],\n        };\n    }\n    return { bytecode: '', errors: [{ msg: 'Compilation failed - no contract found', code: '6969' }] };\n}\n","import { gql } from 'graphql-request';\n\nexport const USERS_QUERY = gql`\n    query Users($limit: Int!, $skip: Int!) {\n        data: users(first: $limit, orderBy: syncingIndex, where: { syncingIndex_gt: $skip }) {\n            gate\n            username: id\n            address: user\n        }\n        total: bundle(id: \"users\") {\n            syncingIndex\n        }\n    }\n`;\n\nexport type UserDto = {\n    gate: string;\n    username: string;\n    address: string;\n};\n","import { Contract, ethers } from 'ethers';\nimport DEPLOYMENT from '../../deployment.json';\nimport { Gate, UserGateFactory } from '../../typechain-types';\nimport { IGateAbi, IUserGateFactoryAbi } from '../abis';\nimport { RpcSigner } from '../type';\nimport request from 'graphql-request';\nimport { USERS_QUERY, UserDto } from '../subgraph';\nimport { SUBGRAPH_ENDPOINT } from '../consts';\n\nexport class UserSdk {\n    readonly gateFactory: UserGateFactory;\n    constructor(readonly signer: RpcSigner) {\n        this.gateFactory = new Contract(DEPLOYMENT.gateFactory, IUserGateFactoryAbi, signer) as UserGateFactory;\n    }\n\n    async getUsername(userAddr: string): Promise<string> {\n        const userGate = await this.gateFactory.callStatic.gates(userAddr);\n        if (userGate === ethers.constants.AddressZero) {\n            return '';\n        }\n        const gate = new Contract(userGate, IGateAbi, this.signer) as Gate;\n        return gate.callStatic.username();\n    }\n\n    async register(username: string) {\n        const userGate = await this.gateFactory.callStatic.gates(await this.signer.getAddress());\n        if (userGate !== ethers.constants.AddressZero) {\n            throw new Error('Already registered');\n        }\n        return this.gateFactory.createGate(username);\n    }\n\n    static async users({ limit = 10, skip = 0 } = {}): Promise<{\n        users: UserDto[];\n        total: number;\n    }> {\n        const results = await request<{ data: UserDto[]; total: { syncingIndex: number } }>(\n            SUBGRAPH_ENDPOINT,\n            USERS_QUERY,\n            {\n                limit,\n                skip,\n            }\n        );\n        return {\n            users: results.data,\n            total: results.total.syncingIndex,\n        };\n    }\n}\n","export const SUBGRAPH_ENDPOINT = 'https://api.thegraph.com/subgraphs/name/leduythuccs/solidity-judge';\n","import { RpcSigner, SubmissionResult, SubmissionResultRaw, TestCase } from '../type';\nimport { Gate, Problem, UserGateFactory } from '../../typechain-types';\nimport { BigNumber, BigNumberish, CallOverrides, Contract, ethers } from 'ethers';\nimport DEPLOYMENT from '../../deployment.json';\nimport { IGateAbi, IProblemAbi, IUserGateFactoryAbi } from '../abis';\nimport { isSameAddress } from '../helper';\nimport { TransactionReceipt } from '@ethersproject/abstract-provider';\n\nexport type ProblemConfig = {\n    inputFormat: string[];\n    outputFormat: string[];\n    address: string;\n};\n\nexport class ProblemSDK {\n    readonly gateFactory: UserGateFactory;\n    readonly problem: Problem;\n    constructor(readonly problemConfig: ProblemConfig, readonly userAddr: string, readonly signer: RpcSigner) {\n        this.gateFactory = new Contract(DEPLOYMENT.gateFactory, IUserGateFactoryAbi, signer) as UserGateFactory;\n        this.problem = new Contract(problemConfig.address, IProblemAbi, signer) as Problem;\n    }\n\n    /**\n     * @note For admin only\n     */\n    async addTest(inputs: BigNumberish[], outputs: BigNumberish[], gasLimit: number) {\n        const encodedInput = this.encodeData(inputs, this.problemConfig.inputFormat);\n        const encodedOutput = ethers.utils.keccak256(this.encodeData(outputs, this.problemConfig.outputFormat));\n\n        return this.problem.addTest({\n            input: encodedInput,\n            output: encodedOutput,\n            gasLimit: gasLimit,\n        });\n    }\n    async replaceTests(tests: (TestCase & { output: string[] })[]) {\n        const encodedTests = tests.map((test) => ({\n            gasLimit: test.gasLimit,\n            input: this.encodeData(test.input, this.problemConfig.inputFormat),\n            output: ethers.utils.keccak256(this.encodeData(test.output, this.problemConfig.outputFormat)),\n        }));\n        return this.problem.replaceTests(encodedTests);\n    }\n\n    /**\n     * @note For admin only\n     */\n    async setDeadline(deadline: Date) {\n        return this.problem.setDeadline(Math.trunc(deadline.getTime() / 1000));\n    }\n\n    /**\n     * @note For participants to use this function to run example\n     */\n    async deployAndRunExample(inputs: string[], bytecode: string) {\n        const userGate = await this.gateFactory.callStatic.gates(this.userAddr);\n        const gate = new Contract(userGate, IGateAbi, this.signer) as Gate;\n\n        const encodedInput = this.encodeData(inputs, this.problemConfig.inputFormat);\n\n        const { gasUsed, output: encodedOutput } = await gate.callStatic.deployAndRun(bytecode, encodedInput);\n        const output = this.decodeData(encodedOutput, this.problemConfig.outputFormat);\n        return {\n            output,\n            gasUsed: gasUsed.toNumber(),\n        };\n    }\n\n    async declareSolutionHash(hashedSolution: string) {\n        return this.problem.declareSolutionHash(hashedSolution);\n    }\n\n    async getContestantInfo() {\n        return this.problem.callStatic.getContestantInfo(this.userAddr);\n    }\n\n    async getDeadline(): Promise<Date> {\n        return this.problem.callStatic.deadline().then((x) => new Date(x.toNumber() * 1000));\n    }\n\n    /**\n     * Write function to submit solution (deploy a new contract)\n     */\n    async submitAndRunSolution(bytecode: string, isPreDeadlineSolution = false) {\n        return this.problem.submitAndRunSolution(this.userAddr, isPreDeadlineSolution, bytecode, {\n            gasLimit: 8_000_000,\n        });\n    }\n\n    async getTests(overrides: CallOverrides = {}): Promise<TestCase[]> {\n        const testCount = (await this.problem.callStatic.testLength(overrides)).toNumber();\n        const tests = [];\n        for (let i = 0; i < testCount; i++) {\n            const test = await this.problem.callStatic.tests(i, overrides);\n            tests.push({\n                input: this.decodeData(test.input, this.problemConfig.inputFormat),\n                gasLimit: test.gasLimit.toNumber(),\n            });\n        }\n        return tests;\n    }\n\n    async getTxReceipt(tx: string | TransactionReceipt): Promise<TransactionReceipt> {\n        while (true) {\n            const txReceipt = typeof tx === 'string' ? await this.signer.provider!.getTransactionReceipt(tx) : tx;\n            if (txReceipt) return txReceipt;\n            // sleep for 0.5 second\n            await new Promise((resolve) => setTimeout(resolve, 500));\n        }\n    }\n    async parseSubmissionVerdict(tx: string | TransactionReceipt): Promise<SubmissionResult> {\n        const txReceipt = await this.getTxReceipt(tx);\n\n        const filter = this.problem.filters.RunSolution();\n        let runSolutionEvents = txReceipt.logs\n            .filter((log) => isSameAddress(log.topics[0], filter.topics![0] as string))\n            .map((log) => {\n                const raw: SubmissionResultRaw = this.problem.interface.parseLog(log)['args'] as any;\n                const result: Omit<SubmissionResult, 'tests'> = {\n                    contestant: raw.contestant,\n                    version: 0,\n                    isPreDeadlineSolution: raw.isPreDeadlineSolution,\n                    point: raw.point.toNumber() / 100,\n                    verdicts: raw.verdicts,\n                };\n                return result;\n            });\n\n        if (runSolutionEvents.length === 0) {\n            throw new Error('No RunSolution event found');\n        }\n\n        return {\n            ...runSolutionEvents[0],\n            tests: await this.getTests({ blockTag: txReceipt.blockNumber }),\n        };\n    }\n\n    private decodeData(data: string, format: string[]): string[] {\n        const decoded = ethers.utils.defaultAbiCoder.decode(format, data);\n        return decoded.map((x: any) => {\n            if (Array.isArray(x)) {\n                return x.map((y: any) => y.toString()).join(',');\n            }\n            return x.toString();\n        });\n    }\n\n    private encodeData(data: BigNumberish[], format: string[]): string {\n        const splittedData = data.map((input, i) => {\n            if (format[i].endsWith('[]')) {\n                return input.toString().split(',');\n            }\n            return input;\n        });\n        return ethers.utils.defaultAbiCoder.encode(format, splittedData);\n    }\n}\n"],"names":["TestCaseVerdict","solComp","isSameAddress","a","b","toLowerCase","window","require","compilerVersion","getCompilerVersion","_getCompilerVersion","_context","getCompilerVersions","results","releases","latestRelease","_compileSolidity","source","_context2","version","solidityCompiler","contractBody","allErrors","output","errors","filter","x","severity","length","bytecode","map","msg","formattedMessage","code","errorCode","contracts","Compiled_Contracts","evm","object","USERS_QUERY","gql","UserSdk","signer","gateFactory","this","Contract","IUserGateFactoryAbi","_proto","getUsername","userAddr","callStatic","gates","userGate","ethers","constants","AddressZero","gate","IGateAbi","username","register","getAddress","Error","createGate","users","limit","_ref","skip","_context3","request","data","total","syncingIndex","problemConfig","problem","address","IProblemAbi","addTest","inputs","outputs","gasLimit","encodedInput","encodeData","inputFormat","encodedOutput","utils","keccak256","outputFormat","input","replaceTests","tests","encodedTests","test","_this","setDeadline","deadline","Math","trunc","getTime","deployAndRunExample","_context4","deployAndRun","gasUsed","_yield$gate$callStati","decodeData","toNumber","declareSolutionHash","hashedSolution","getContestantInfo","getDeadline","then","Date","submitAndRunSolution","isPreDeadlineSolution","getTests","overrides","_context9","testLength","testCount","i","push","getTxReceipt","tx","_context10","provider","getTransactionReceipt","txReceipt","Promise","resolve","setTimeout","parseSubmissionVerdict","_context11","filters","RunSolution","runSolutionEvents","logs","log","topics","raw","_this2","parseLog","contestant","point","verdicts","blockTag","blockNumber","format","defaultAbiCoder","decode","Array","isArray","y","toString","join","splittedData","endsWith","split","encode"],"mappings":"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"}