{"version":3,"file":"sdk.esm.js","sources":["../SDK/type.ts","../SDK/helper.ts","../SDK/subgraph/user.ts","../SDK/consts.ts","../SDK/entities/User.ts","../SDK/entities/Problem.ts"],"sourcesContent":["import { BigNumber, BigNumberish, CallOverrides, Contract, ethers } from 'ethers';\n\nexport type RpcSigner = ethers.Signer;\n\nexport type SubmissionResultRaw = {\n    contestant: string;\n    isPreDeadlineSolution: boolean;\n    point: BigNumber;\n    verdicts: number[];\n};\n\nexport enum TestCaseVerdict {\n    Accepted = 0,\n    WrongAnswer = 1,\n    Revert = 2,\n}\n\nexport type TestCase = {\n    input: string[];\n    gasLimit: number;\n};\n\nexport type SubmissionResult = {\n    contestant: string;\n    version: number;\n    isPreDeadlineSolution: boolean;\n    point: number;\n    verdicts: TestCaseVerdict[];\n    tests: TestCase[];\n};\n","let solComp: any = null;\n\nif (typeof window !== 'undefined') {\n    solComp = require('@agnostico/browser-solidity-compiler');\n}\n\nexport function isSameAddress(a: string, b: string) {\n    return a.toLowerCase() === b.toLowerCase();\n}\n\nlet compilerVersion = '';\nexport async function getCompilerVersion() {\n    if (compilerVersion !== '') {\n        return compilerVersion;\n    }\n    const results = (await solComp.getCompilerVersions()) as any;\n    compilerVersion = results.releases[results.latestRelease];\n    return compilerVersion;\n}\n\nexport async function compileSolidity(source: string) {\n    const version = await getCompilerVersion();\n    const output = (await solComp.solidityCompiler({\n        version: `https://binaries.soliditylang.org/bin/${version}`,\n        contractBody: source,\n    })) as any;\n    const allErrors: {\n        severity: string;\n        formattedMessage: string;\n        errorCode: string;\n    }[] = output['errors'] ?? [];\n\n    const errors = allErrors.filter((x) => x.severity === 'error');\n\n    if (errors.length > 0) {\n        return {\n            bytecode: '',\n            errors: errors.map((x) => {\n                return {\n                    msg: x.formattedMessage,\n                    code: x.errorCode,\n                };\n            }),\n        };\n    }\n\n    const contracts = output.contracts.Compiled_Contracts;\n    for (const contractName in contracts) {\n        return {\n            bytecode: '0x' + contracts[contractName].evm.bytecode.object,\n            errors: [],\n        };\n    }\n    return { bytecode: '', errors: [{ msg: 'Compilation failed - no contract found', code: '6969' }] };\n}\n","import { gql } from 'graphql-request';\n\nexport const USERS_QUERY = gql`\n    query Users($limit: Int!, $skip: Int!) {\n        data: users(first: $limit, orderBy: syncingIndex, where: { syncingIndex_gt: $skip }) {\n            gate\n            username: id\n            address: user\n        }\n        total: bundle(id: \"users\") {\n            syncingIndex\n        }\n    }\n`;\n\nexport type UserDto = {\n    gate: string;\n    username: string;\n    address: string;\n};\n","export const SUBGRAPH_ENDPOINT = 'https://api.thegraph.com/subgraphs/name/leduythuccs/solidity-judge';\n","import { Contract, ethers } from 'ethers';\nimport DEPLOYMENT from '../../deployment.json';\nimport { Gate, UserGateFactory } from '../../typechain-types';\nimport { IGateAbi, IUserGateFactoryAbi } from '../abis';\nimport { RpcSigner } from '../type';\nimport request from 'graphql-request';\nimport { USERS_QUERY, UserDto } from '../subgraph';\nimport { SUBGRAPH_ENDPOINT } from '../consts';\n\nexport class UserSdk {\n    readonly gateFactory: UserGateFactory;\n    constructor(readonly signer: RpcSigner) {\n        this.gateFactory = new Contract(DEPLOYMENT.gateFactory, IUserGateFactoryAbi, signer) as UserGateFactory;\n    }\n\n    async getUsername(userAddr: string): Promise<string> {\n        const userGate = await this.gateFactory.callStatic.gates(userAddr);\n        if (userGate === ethers.constants.AddressZero) {\n            return '';\n        }\n        const gate = new Contract(userGate, IGateAbi, this.signer) as Gate;\n        return gate.callStatic.username();\n    }\n\n    async register(username: string) {\n        const userGate = await this.gateFactory.callStatic.gates(await this.signer.getAddress());\n        if (userGate !== ethers.constants.AddressZero) {\n            throw new Error('Already registered');\n        }\n        return this.gateFactory.createGate(username);\n    }\n\n    static async users({ limit = 10, skip = 0 } = {}): Promise<{\n        users: UserDto[];\n        total: number;\n    }> {\n        const results = await request<{ data: UserDto[]; total: { syncingIndex: number } }>(\n            SUBGRAPH_ENDPOINT,\n            USERS_QUERY,\n            {\n                limit,\n                skip,\n            }\n        );\n        return {\n            users: results.data,\n            total: results.total.syncingIndex,\n        };\n    }\n}\n","import { RpcSigner, SubmissionResult, SubmissionResultRaw, TestCase } from '../type';\nimport { Gate, Problem, UserGateFactory } from '../../typechain-types';\nimport { BigNumber, BigNumberish, CallOverrides, Contract, ethers } from 'ethers';\nimport DEPLOYMENT from '../../deployment.json';\nimport { IGateAbi, IProblemAbi, IUserGateFactoryAbi } from '../abis';\nimport { isSameAddress } from '../helper';\nimport { TransactionReceipt } from '@ethersproject/abstract-provider';\n\nexport type ProblemConfig = {\n    inputFormat: string[];\n    outputFormat: string[];\n    address: string;\n};\n\nexport class ProblemSDK {\n    readonly gateFactory: UserGateFactory;\n    readonly problem: Problem;\n    constructor(readonly problemConfig: ProblemConfig, readonly userAddr: string, readonly signer: RpcSigner) {\n        this.gateFactory = new Contract(DEPLOYMENT.gateFactory, IUserGateFactoryAbi, signer) as UserGateFactory;\n        this.problem = new Contract(problemConfig.address, IProblemAbi, signer) as Problem;\n    }\n\n    /**\n     * @note For admin only\n     */\n    async addTest(inputs: BigNumberish[], outputs: BigNumberish[], gasLimit: number) {\n        const encodedInput = this.encodeData(inputs, this.problemConfig.inputFormat);\n        const encodedOutput = ethers.utils.keccak256(this.encodeData(outputs, this.problemConfig.outputFormat));\n\n        return this.problem.addTest({\n            input: encodedInput,\n            output: encodedOutput,\n            gasLimit: gasLimit,\n        });\n    }\n    async replaceTests(tests: (TestCase & { output: string[] })[]) {\n        const encodedTests = tests.map((test) => ({\n            gasLimit: test.gasLimit,\n            input: this.encodeData(test.input, this.problemConfig.inputFormat),\n            output: ethers.utils.keccak256(this.encodeData(test.output, this.problemConfig.outputFormat)),\n        }));\n        return this.problem.replaceTests(encodedTests);\n    }\n\n    /**\n     * @note For admin only\n     */\n    async setDeadline(deadline: Date) {\n        return this.problem.setDeadline(Math.trunc(deadline.getTime() / 1000));\n    }\n\n    /**\n     * @note For participants to use this function to run example\n     */\n    async deployAndRunExample(inputs: string[], bytecode: string) {\n        const userGate = await this.gateFactory.callStatic.gates(this.userAddr);\n        const gate = new Contract(userGate, IGateAbi, this.signer) as Gate;\n\n        const encodedInput = this.encodeData(inputs, this.problemConfig.inputFormat);\n\n        const { gasUsed, output: encodedOutput } = await gate.callStatic.deployAndRun(bytecode, encodedInput);\n        const output = this.decodeData(encodedOutput, this.problemConfig.outputFormat);\n        return {\n            output,\n            gasUsed: gasUsed.toNumber(),\n        };\n    }\n\n    async declareSolutionHash(hashedSolution: string) {\n        return this.problem.declareSolutionHash(hashedSolution);\n    }\n\n    async getContestantInfo() {\n        return this.problem.callStatic.getContestantInfo(this.userAddr);\n    }\n\n    async getDeadline(): Promise<Date> {\n        return this.problem.callStatic.deadline().then((x) => new Date(x.toNumber() * 1000));\n    }\n\n    /**\n     * Write function to submit solution (deploy a new contract)\n     */\n    async submitAndRunSolution(bytecode: string, isPreDeadlineSolution = false) {\n        return this.problem.submitAndRunSolution(this.userAddr, isPreDeadlineSolution, bytecode, {\n            gasLimit: 8_000_000,\n        });\n    }\n\n    async getTests(overrides: CallOverrides = {}): Promise<TestCase[]> {\n        const testCount = (await this.problem.callStatic.testLength(overrides)).toNumber();\n        const tests = [];\n        for (let i = 0; i < testCount; i++) {\n            const test = await this.problem.callStatic.tests(i, overrides);\n            tests.push({\n                input: this.decodeData(test.input, this.problemConfig.inputFormat),\n                gasLimit: test.gasLimit.toNumber(),\n            });\n        }\n        return tests;\n    }\n\n    async getTxReceipt(tx: string | TransactionReceipt): Promise<TransactionReceipt> {\n        while (true) {\n            const txReceipt = typeof tx === 'string' ? await this.signer.provider!.getTransactionReceipt(tx) : tx;\n            if (txReceipt) return txReceipt;\n            // sleep for 0.5 second\n            await new Promise((resolve) => setTimeout(resolve, 500));\n        }\n    }\n    async parseSubmissionVerdict(tx: string | TransactionReceipt): Promise<SubmissionResult> {\n        const txReceipt = await this.getTxReceipt(tx);\n\n        const filter = this.problem.filters.RunSolution();\n        let runSolutionEvents = txReceipt.logs\n            .filter((log) => isSameAddress(log.topics[0], filter.topics![0] as string))\n            .map((log) => {\n                const raw: SubmissionResultRaw = this.problem.interface.parseLog(log)['args'] as any;\n                const result: Omit<SubmissionResult, 'tests'> = {\n                    contestant: raw.contestant,\n                    version: 0,\n                    isPreDeadlineSolution: raw.isPreDeadlineSolution,\n                    point: raw.point.toNumber() / 100,\n                    verdicts: raw.verdicts,\n                };\n                return result;\n            });\n\n        if (runSolutionEvents.length === 0) {\n            throw new Error('No RunSolution event found');\n        }\n\n        return {\n            ...runSolutionEvents[0],\n            tests: await this.getTests({ blockTag: txReceipt.blockNumber }),\n        };\n    }\n\n    private decodeData(data: string, format: string[]): string[] {\n        const decoded = ethers.utils.defaultAbiCoder.decode(format, data);\n        return decoded.map((x: any) => {\n            if (Array.isArray(x)) {\n                return x.map((y: any) => y.toString()).join(',');\n            }\n            return x.toString();\n        });\n    }\n\n    private encodeData(data: BigNumberish[], format: string[]): string {\n        const splittedData = data.map((input, i) => {\n            if (format[i].endsWith('[]')) {\n                return input.toString().split(',');\n            }\n            return input;\n        });\n        return ethers.utils.defaultAbiCoder.encode(format, splittedData);\n    }\n}\n"],"names":["TestCaseVerdict","solComp","window","require","isSameAddress","a","b","toLowerCase","compilerVersion","getCompilerVersion","getCompilerVersions","results","releases","latestRelease","compileSolidity","source","version","solidityCompiler","contractBody","output","allErrors","errors","filter","x","severity","length","bytecode","map","msg","formattedMessage","code","errorCode","contracts","Compiled_Contracts","contractName","evm","object","USERS_QUERY","gql","SUBGRAPH_ENDPOINT","UserSdk","signer","gateFactory","Contract","DEPLOYMENT","IUserGateFactoryAbi","getUsername","userAddr","callStatic","gates","userGate","ethers","constants","AddressZero","gate","IGateAbi","username","register","getAddress","Error","createGate","users","limit","skip","request","data","total","syncingIndex","ProblemSDK","problemConfig","problem","address","IProblemAbi","addTest","inputs","outputs","gasLimit","encodedInput","encodeData","inputFormat","encodedOutput","utils","keccak256","outputFormat","input","replaceTests","tests","encodedTests","test","setDeadline","deadline","Math","trunc","getTime","deployAndRunExample","deployAndRun","gasUsed","decodeData","toNumber","declareSolutionHash","hashedSolution","getContestantInfo","getDeadline","then","Date","submitAndRunSolution","isPreDeadlineSolution","getTests","overrides","testLength","testCount","i","push","getTxReceipt","tx","provider","getTransactionReceipt","txReceipt","Promise","resolve","setTimeout","parseSubmissionVerdict","filters","RunSolution","runSolutionEvents","logs","log","topics","raw","parseLog","result","contestant","point","verdicts","blockTag","blockNumber","format","decoded","defaultAbiCoder","decode","Array","isArray","y","toString","join","splittedData","endsWith","split","encode"],"mappings":"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"}